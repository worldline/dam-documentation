openapi: 3.0.1
info:
  title: DAM Platform Application API
  description: Digital Assets Management Platform Application API
  version: v1
servers:
  - url: https://dam-demo-dev.qlf.co.as8677.net
    description: DEV environment
tags:
  - name: Organizations
    description: An organization within the platform. It owns a unique blockchain address
  - name: Groups
    description: A group of organizations. Users can be associated to a group
paths:
  /api/demo/v1/merchants/{orgRef}/wallets:
    post:
      tags:
        - Merchants
      summary: Create a new wallet for the merchant with send and receive permissions
      operationId: createOrganizationWallet
      parameters:
        - name: orgRef
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletShortResponse'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/users/profile/password:
    put:
      tags:
        - Users
      summary: Update the password of the authenticated user
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/cash-outs-schedule/{id}:
    put:
      tags:
        - Cash-out schedule Processes
      summary: Update cash-out schedule data
      operationId: updateCashOutSchedule_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashOutScheduleUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Cash-out schedule Processes
      summary: Delete a cash-out schedule
      operationId: deleteCashOutSchedule
      parameters:
        - name: id
          in: path
          description: Id of the cash-out schedule record
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/rates:
    get:
      tags:
        - Rates
      summary: Gets the list of rates
      operationId: getRate
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetRateListResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs:
    get:
      tags:
        - Cash-out Processes
      summary: Search cash-out request matching the given filter
      operationId: searchCashOuts
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CashOutSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashOutDetail'
    post:
      tags:
        - Cash-out Processes
      summary: Launch the cash-out process
      operationId: cashOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashOutRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/wallets/{address}:
    get:
      tags:
        - Wallets
      summary: Get detail about a Wallet
      operationId: getWalletDetail
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDetailResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Wallets
      summary: Edit a Wallet
      operationId: editWallet
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletEditRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/autocomplete-alias:
    get:
      tags:
        - End Users
      summary: Search end users by Alias
      operationId: searchEndUserByAlias
      parameters:
        - name: alias
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteEndUserResponsePage'
  /api/v1/assets/{assetName}:
    put:
      tags:
        - Assets
      summary: Update asset fields according to the asset name
      operationId: updateAssetWithLogo_1
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/UpdateAssetRequest'
                logo:
                  type: string
                  format: binary
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v2/currencies:
    get:
      tags:
        - Currencies
      summary: Get currencies
      operationId: getCurrencies
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrenciesListResponse'
  /api/v1/versions/mobile:
    get:
      tags:
        - Mobile App Versions
      summary: Retrieve information from all versions
      operationId: getMobileVersions
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileVersionResponse'
  /api/v1/organizations/import-validate-inject/{sessionId}:
    post:
      tags:
        - Organizations
      summary: Organization import validation data inject started successfully
      operationId: injectImportValidateData
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "202":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Organization import validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/wallets/{address}/permissions:
    put:
      tags:
        - Wallets
      summary: Grants or revokes permissions on a wallet
      operationId: updatePermissions
      parameters:
        - name: address
          in: path
          description: Blockchain address linked to the wallet
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletPermissionRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "403":
          description: Invalid admin address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/import-validate:
    post:
      tags:
        - End Users
      summary: Import csv file validation to create end users
      operationId: importValidate
      parameters:
        - name: sessionId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EndUserImportSessionValidateResponse'
        "409":
          description: Validation in progress
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EndUserImportSessionValidateResponse'
  /api/v1/open-credits:
    get:
      tags:
        - OpenCredit
      summary: Search openCredit matching the given filter
      operationId: searchOpenCredits
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/OpenCreditSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenCreditDetailPage'
    post:
      tags:
        - OpenCredit
      summary: OpenCredit creation
      operationId: createOpenCredit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenCreditRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenCreditResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v2/assets/resumes:
    get:
      tags:
        - Assets
      summary: Gets the resumes list of assets
      operationId: getListResume
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/news-cards/{id}:
    put:
      tags:
        - News Cards
      summary: Update a card
      operationId: updateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                card:
                  $ref: '#/components/schemas/NewsCardRequest'
                image:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardResponse'
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - News Cards
      summary: Delete a card
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardResponse'
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/users/profile:
    get:
      tags:
        - Users
      summary: Get detail of the logged in user
      operationId: getProfile
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
  /api/v1/scopes:
    get:
      tags:
        - Scopes
      summary: Gets the list of scopes
      operationId: list_1
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDetailResponse'
    post:
      tags:
        - Scopes
      summary: Scope creation
      operationId: createScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/rates/{assetName}/{currency}:
    delete:
      tags:
        - Rates
      summary: Delete the rate
      operationId: deleteRate
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
        - name: currency
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Rate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/transactions/import-validate-inject/{sessionId}:
    post:
      tags:
        - Transactions
      summary: Transaction import validation data inject started successfully
      operationId: injectImportValidateData_1
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "202":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Transaction import validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/set-password:
    post:
      tags:
        - End Users
      summary: Define a new password for an end user with the otp code requested previously
      operationId: setPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "403":
          description: Password could not be set with the given code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/users/{userId}:
    get:
      tags:
        - Users
      summary: Get detail of a user
      operationId: getDetail
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/orders/{orderRef}/cancel:
    post:
      tags:
        - Orders
      summary: Order cancellation
      operationId: cancelOrder
      parameters:
        - name: orderRef
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderAbortRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
        "404":
          description: Order not found or not cancellable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Search users
      operationId: searchUsers
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/UserSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponsePage'
  /api/v1/transactions/export:
    get:
      tags:
        - Transactions
      summary: Export search of transaction
      operationId: generateTransactionExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/TransactionSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/loyalty-programs/{loyaltyProgramId}:
    put:
      tags:
        - Loyalty Programs
      summary: Update loyalty program
      operationId: updateLoyaltyProgram
      parameters:
        - name: loyaltyProgramId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyProgramCreationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Loyalty program not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Loyalty Programs
      summary: Delete the loyalty program
      operationId: deleteLoyaltyProgram
      parameters:
        - name: loyaltyProgramId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Loyalty program not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/organizations/import-validate:
    post:
      tags:
        - Organizations
      summary: Validate organization import csv file
      operationId: importValidate_1
      parameters:
        - name: sessionId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrganizationImportSessionValidateResponse'
        "409":
          description: Import in progress
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrganizationImportSessionValidateResponse'
  /api/v1/bills:
    get:
      tags:
        - Bills
      summary: Search bills matching the given filter
      operationId: searchBills
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BillSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillDetailPage'
    post:
      tags:
        - Bills
      summary: Bill creation
      operationId: createBill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillResponse'
        "403":
          description: Invalid billing address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/customer-sponsorships/active:
    get:
      tags:
        - Customer Sponsorship
      summary: Get active customer sponsorship
      operationId: findActive
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSponsorshipRecordPage'
  /api/demo/v1/demo/asset-whitelist:
    get:
      tags:
        - Demo
      summary: Retrieve the list of assets that are available in the whitelabel demo scope
      operationId: getAssetFromWhitelist
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetWhitelistResponse'
    post:
      tags:
        - Demo
      summary: Defines the list of assets that are available in the whitelabel demo scope
      operationId: setAssetWhiteList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetWhiteListRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/kyc-rules:
    get:
      tags:
        - Kyc Rules
      summary: Gets the list of kyc rules
      operationId: list
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycRuleListResponse'
    post:
      tags:
        - Kyc Rules
      summary: Create a kyc rule
      operationId: createKycRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycRuleRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycRuleResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/demo/v1/customers/{userId}/wallets:
    post:
      tags:
        - Customers
      summary: Creates a wallet for an end user with send and receive permission
      operationId: createWallet
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletShortResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/transactions/{sessionId}/import-validate-status:
    get:
      tags:
        - Transactions
      summary: Get transaction import validation status response
      operationId: getValidationResults
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Transaction validation import not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users/{userId}/activate:
    patch:
      tags:
        - Users
      summary: Activates a user
      operationId: activate
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/assets/{assetName}/tokens:
    post:
      tags:
        - Assets
      summary: Issue a token for a non fungible asset
      operationId: issueToken
      parameters:
        - name: assetName
          in: path
          description: Asset name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueTokenRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxIdResponse'
        "403":
          description: Invalid issuing address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/establishments/{id}:
    put:
      tags:
        - Establishments
      summary: Update establishment fields according to the establishment id
      operationId: updateEstablishment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEstablishmentRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Establishment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Establishments
      summary: Delete an establishment
      operationId: delete_3
      parameters:
        - name: id
          in: path
          description: Unique name of the establishment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Establishment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/profile:
    get:
      tags:
        - End Users
      summary: Gets detail about the logged in user
      operationId: getDetail_1
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserDetailResponse'
    put:
      tags:
        - End Users
      summary: Update profile of a logged in endUser
      operationId: updateAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/cash-outs/export:
    get:
      tags:
        - Cash-out Processes
      summary: Export search of cash-out
      operationId: generateCashOutExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CashOutSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: Cash-out not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs/trigger:
    post:
      tags:
        - Cash-out Processes
      summary: Launch the cash-out process
      operationId: issuerCashOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerCashOutRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
  /api/v1/users/preferences:
    patch:
      tags:
        - Users
      summary: Updates preferences of an existing user
      operationId: updatePreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferencesUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/cash-outs/files:
    get:
      tags:
        - Cash-out Processes
      summary: Search cash-out files matching the given filter
      operationId: searchCashOutFiles
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CashOutFileSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashOutFileDetailPage'
  /api/v1/bills/{ref}/pay:
    post:
      tags:
        - Bills
      summary: Pay a bill
      operationId: payBill
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayBillRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillStatusResponse'
        "403":
          description: Invalid payment address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Bill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/integrations/download:
    get:
      tags:
        - Integartion
      summary: Download import file
      operationId: getImportFile
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                type: string
                format: binary
        "404":
          description: File not found
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/v1/assets/{assetName}/logo:
    get:
      tags:
        - Assets
      summary: Download the logo file according to the asset name
      operationId: getAssetLogo
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            text/plain or image/png: {}
        "404":
          description: Logo of assetName not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Assets
      summary: Update asset logo according to the asset name
      operationId: updateAssetLogo
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Assets
      summary: Delete the asset logo
      operationId: deleteAssetLogo
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Logo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs/target-wallets:
    get:
      tags:
        - Cash-out Processes
      summary: Get the 10 first allowed target wallets for a cash-out
      operationId: getCashOutTargetWallets
      parameters:
        - name: orgTypeIn
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/end-users/unregister:
    post:
      tags:
        - End Users
      summary: "Unregister current user, with optional check to their wallets balance"
      operationId: unregister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnregisterRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "422":
          description: Invalid request (wallet balance is non zero)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/transactions/{txId}:
    get:
      tags:
        - Transactions
      summary: Gets detail about a transaction
      operationId: getTransactionDetail
      parameters:
        - name: txId
          in: path
          description: ID of the transaction
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailResponse'
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs/{sessionId}/import-validate-response:
    get:
      tags:
        - Cash-out Processes
      summary: Get cash-out import validation detailed response
      operationId: getValidationDetailedResponse
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/organizations/{organizationRef}:
    get:
      tags:
        - Organizations
      summary: Gets detail about an organization
      operationId: getOrganizationDetail
      parameters:
        - name: organizationRef
          in: path
          description: Unique reference of the organization
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetailResponse'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Organizations
      summary: Updates an organization
      operationId: editOrganization
      parameters:
        - name: organizationRef
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditOrganizationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationShortResponse'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Organizations
      summary: Deletes an organization
      operationId: delete
      parameters:
        - name: organizationRef
          in: path
          description: Unique reference of the organization
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrgUserResponse'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/{sessionId}/import-validate-response:
    get:
      tags:
        - End Users
      summary: Get end user import validation detailed response
      operationId: getValidationDetailedResponse_1
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: End user validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/bills/{ref}:
    get:
      tags:
        - Bills
      summary: Bill details
      operationId: getBill
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillDetailResponse'
        "404":
          description: Bill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/logos/{type}:
    get:
      tags:
        - Logo
      summary: Download the logo file according to the file type
      operationId: downloadLogo
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - SHORT_LOGO
              - LONG_LOGO
              - ASSET
              - EMAIL_LOGO
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            text/plain or image/png: {}
        "404":
          description: Logo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Logo
      summary: Delete the logo file according to the file type
      operationId: deleteLogo
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - SHORT_LOGO
              - LONG_LOGO
              - ASSET
              - EMAIL_LOGO
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Logo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get detail of a user
      operationId: getDetail_3
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Update details of a user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Users
      summary: Deletes a user
      operationId: delete_1
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/{userId}:
    get:
      tags:
        - End Users
      summary: Gets detail about an existing end user
      operationId: getDetail_2
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserDetailResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - End Users
      summary: Updates detail of an existing end user
      operationId: update
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndUserUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: End user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - End Users
      summary: Deletes a end user
      operationId: delete_2
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/stats:
    get:
      tags:
        - End Users
      summary: Gets statistics about end users
      operationId: getEndUserStats
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserStatsResponse'
  /api/v1/organizations:
    get:
      tags:
        - Organizations
      summary: Search organizations
      operationId: searchOrganizations
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationShortResponsePage'
    post:
      tags:
        - Organizations
      summary: Creates an organization inside an optional parent group
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationShortResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v2/establishments:
    get:
      tags:
        - Establishments
      summary: Search establishments matching the given filter
      operationId: searchEstablishments
      parameters:
        - name: orgRef
          in: query
          required: false
          schema:
            type: string
        - name: latitude
          in: query
          required: false
          schema:
            type: number
        - name: longitude
          in: query
          required: false
          schema:
            type: number
        - name: maxDistance
          in: query
          required: false
          schema:
            type: string
        - name: tags
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          required: false
          schema:
            type: string
        - name: phoneNumber
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstablishmentDetailResponsePage'
  /api/v1/users/reset-password:
    post:
      tags:
        - Users
      summary: "Trigger the password reset workflow for a user matching the given email, if any"
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Successful request, even if no matching user was found"
          content:
            application/json: {}
  /api/v1/wallets/{address}/unspent-list/{assetName}:
    get:
      tags:
        - Wallets
      summary: Get the unspent list of an asset for a wallet
      operationId: getUnspentList
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnspentListResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/audit/export:
    get:
      tags:
        - Audit
      summary: Export search of audit record
      operationId: generateAuditExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AuditSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: Audit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/wallets/{address}/assets:
    get:
      tags:
        - Wallets
      summary: Get assets in the scope of the wallet
      operationId: getAssetsInWalletScope
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletAssetsResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                type: string
  /api/v1/payments/{paymentRef}:
    get:
      tags:
        - payment-controller
      operationId: getPaymentStatus
      parameters:
        - name: paymentRef
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
  /api/v1/end-users/check-password-code:
    post:
      tags:
        - End Users
      summary: Check otp code validity for password reset
      operationId: checkPasswordCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckPasswordCodeRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request. Code is valid
          content:
            application/json: {}
        "403":
          description: Code is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/demo/cards:
    get:
      tags:
        - Demo Cards (deprecated)
      summary: List available cards
      operationId: getCards
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardListResponse'
    post:
      tags:
        - Demo Cards (deprecated)
      summary: Create a new card
      operationId: createCard_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                card:
                  $ref: '#/components/schemas/NewsCardRequest'
                image:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardResponse'
        "400":
          description: Maximum card count reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/issuer-cash-outs-schedule:
    get:
      tags:
        - Issuer cash-out schedule Processes
      summary: Retrieve issuer cash out schedule
      operationId: getCashOutScheduleByAssetsAndWallet
      parameters:
        - name: assets
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssuerCashOutScheduleDetail'
        "404":
          description: Cash-out schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Issuer cash-out schedule Processes
      summary: Schedule issuer cash-out process
      operationId: createCashOutSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerCashOutScheduleRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IssuerCashOutScheduleDetail'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/{userId}/kyc:
    put:
      tags:
        - End Users
      summary: Updates kyc level of an existing end user
      operationId: updateKyc
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the enduser
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: End user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/organizations/stats:
    get:
      tags:
        - Organizations
      summary: Gets statistics about organizations
      operationId: getOrgStats
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationStatsResponse'
  /api/v1/open-credits/{ref}/qrcode:
    get:
      tags:
        - OpenCredit
      summary: Get a QR code image that can be scanned by customer to pay the openCredit
      operationId: getOpenCreditQrCode
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            image/png: {}
        "404":
          description: OpenCredit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/transactions/{sessionId}/import-validate-response:
    get:
      tags:
        - Transactions
      summary: Get transaction import validation detailed response
      operationId: getValidationDetailedResponse_2
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Transaction validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/wallets/{address}/balance:
    get:
      tags:
        - Wallets
      summary: Gets the wallet balance
      operationId: getWalletBalance
      parameters:
        - name: address
          in: path
          description: Blockchain address linked to the wallet
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalanceResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/assets:
    get:
      tags:
        - Assets
      summary: Gets the list of assets
      operationId: list_2
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetListResponse'
    post:
      tags:
        - Assets
      summary: Initial issuing of an asset
      operationId: issueWithLogo_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/IssueAssetRequest'
                assetLogo:
                  type: string
                  format: binary
          application/json:
            schema:
              $ref: '#/components/schemas/IssueAssetRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxIdResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/TxIdResponse'
        "403":
          description: Invalid issuing address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/TxIdResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
            '*/*':
              schema:
                $ref: '#/components/schemas/TxIdResponse'
  /api/v1/organizations/{orgRef}/wallets/{address}/qrcode:
    get:
      tags:
        - Organizations
      summary: Gets the payment QR-Code for an organization
      operationId: generateQrCode
      parameters:
        - name: orgRef
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            image/png: {}
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/transactions/real-purchase:
    post:
      tags:
        - Transactions
      summary: Purchases a quantity of an asset
      operationId: realPurchase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealPurchaseRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "403":
          description: Invalid purchase address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/export:
    get:
      tags:
        - End Users
      summary: Export search of end user
      operationId: generateEndUserExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EndUserSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
  /api/v1/wallets/{address}/stats:
    get:
      tags:
        - Wallets
      summary: Get statistics about a specific wallet
      operationId: getWalletStats
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStatsResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users/profiles:
    get:
      tags:
        - Users
      summary: Get available profiles for user creation and edition
      operationId: listProfiles
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilesResponse'
  /api/v1/groups:
    get:
      tags:
        - Groups
      summary: List available groups
      operationId: getGroups
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
    post:
      tags:
        - Groups
      summary: Creates a group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/demo/v1/demo/logos:
    put:
      tags:
        - Demo
      summary: Upload logos (deprecated)
      operationId: uploadLogos
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shortLogo:
                  type: string
                  format: binary
                longLogo:
                  type: string
                  format: binary
                emailLogo:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "422":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/audit:
    get:
      tags:
        - Audit
      summary: Search audit records matching the given filter
      operationId: find
      parameters:
        - name: searchBean
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AuditSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditRecordPage'
  /api/v1/users/import-validate-inject/{sessionId}:
    post:
      tags:
        - Users
      summary: User import validation data inject started successfully
      operationId: injectImportValidateData_2
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "202":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: User import validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/{userId}/sms:
    get:
      tags:
        - End Users
      summary: Get sms history of an existing end user
      operationId: getSmsHistory
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsHistoryResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/customer-sponsorships/sponsored:
    get:
      tags:
        - Customer Sponsorship
      summary: Return the code of sponsorship for the user and the program
      operationId: getEndUserSponsored
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsoredEndUserResponse'
        "404":
          description: end user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/device-credentials/validate:
    post:
      tags:
        - End Users
      summary: Validate a device's pubKey
      operationId: validateDeviceCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateDeviceCredentialRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/orders/{orderRef}/status:
    get:
      tags:
        - Orders
      summary: Get order status
      operationId: getOrderStatus
      parameters:
        - name: orderRef
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
  /api/demo/v1/transactions/purchase:
    post:
      tags:
        - Transactions
      summary: Purchases a quantity of an asset
      operationId: purchase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "403":
          description: Invalid purchase address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/devices:
    post:
      tags:
        - Devices
      operationId: registerOrSyncDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
  /api/v1/kyc-rules/{kycRuleId}:
    put:
      tags:
        - Kyc Rules
      summary: Update kyc rule
      operationId: updateKycRule
      parameters:
        - name: kycRuleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KycRuleRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Kyc rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Kyc Rules
      summary: Delete the kyc rule
      operationId: deleteKycRule
      parameters:
        - name: kycRuleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Kyc rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/customer-sponsorships/code/{code}/validate:
    get:
      tags:
        - Customer Sponsorship
      summary: Return if the code of sponsorship is valid
      operationId: getCodeIfValid
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSponsorshipValidResponse'
  /api/v1/business-sponsorships:
    get:
      tags:
        - Business Sponsorship
      summary: Search Business sponsorship records matching the given filter
      operationId: find_2
      parameters:
        - name: searchBean
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BusinessSponsorshipSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessSponsorshipRecordPage'
    post:
      tags:
        - Business Sponsorship
      summary: Create a business sponsorship
      operationId: createBusinessSponsorship
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessSponsorshipRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessSponsorshipResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/{userId}/wallets:
    post:
      tags:
        - End Users
      summary: Creates a wallet for an end user with send and receive permission
      operationId: createWallet_1
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletShortResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/payments/hpp/return:
    post:
      tags:
        - payment-controller
      operationId: returnFromHPP
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                all:
                  type: object
                  additionalProperties:
                    type: object
                  writeOnly: true
                empty:
                  type: boolean
              additionalProperties:
                type: array
                items:
                  type: object
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/orders/{orderRef}/complete:
    post:
      tags:
        - Orders
      summary: Order completion
      operationId: completeOrder
      parameters:
        - name: orderRef
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCompleteRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
        "404":
          description: Order not found or not completable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/autocomplete:
    get:
      tags:
        - End Users
      summary: Search end users by friendly name
      operationId: autocompleteNames
      parameters:
        - name: friendlyName
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteEndUserResponsePage'
  /api/v1/customer-sponsorships:
    get:
      tags:
        - Customer Sponsorship
      summary: Search customer sponsorship records matching the given filter
      operationId: find_1
      parameters:
        - name: searchBean
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CustomerSponsorshipSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSponsorshipRecordPage'
    post:
      tags:
        - Customer Sponsorship
      summary: Create a customer sponsorship
      operationId: createCustomerSponsorship
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSponsorshipRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSponsorshipResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users:
    get:
      tags:
        - End Users
      summary: Search end users
      operationId: search
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EndUserSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserSearchResponsePage'
    post:
      tags:
        - End Users
      summary: Registers a new end user
      operationId: register_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndUserRegisterRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/cash-outs/files/{token}:
    get:
      tags:
        - Cash-out Processes
      summary: "Download the report file for the latest cash-out process, and reset the cash-out data"
      operationId: downloadCashOutFile
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
        - name: fileName
          in: query
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            text/csv: {}
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/customers/check-password-code:
    post:
      tags:
        - Customers
      summary: Check otp code validity for password reset
      operationId: checkPasswordCode_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckPasswordCodeRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request. Code is valid
          content:
            application/json: {}
        "403":
          description: Code is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/orders/export:
    get:
      tags:
        - Orders
      summary: Export search of cash-in
      operationId: generateCashInExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PurchaseTokenOrderSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: Cash-in not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/groups/{groupRef}/users:
    post:
      tags:
        - Groups
      summary: Create a user in the group
      operationId: createGroupUser
      parameters:
        - name: groupRef
          in: path
          description: Unique reference of the group
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgUserRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrgUserResponse'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/import:
    post:
      tags:
        - End Users
      summary: Import csv file to create endUsers
      operationId: import
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
  /api/v1/scopes/{ref}:
    get:
      tags:
        - Scopes
      summary: Gets detail about scope
      operationId: getScopeDetails
      parameters:
        - name: ref
          in: path
          description: Unique identifier of the scope
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDetailResponse'
        "404":
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Scopes
      summary: Update scope fields according to the scope name
      operationId: updateScope
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Scopes
      summary: Delete a scope
      operationId: deleteScope
      parameters:
        - name: ref
          in: path
          description: Unique name of the scope
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/merchants/devices:
    post:
      tags:
        - Merchants
      summary: Synchronize current device data for logged in merchant
      operationId: registerOrSyncDevice_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/orders:
    get:
      tags:
        - Orders
      summary: Search purchase token orders matching the given filter
      operationId: searchPurchaseTokenOrders
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PurchaseTokenOrderSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseTokenOrderDetailPage'
    post:
      tags:
        - Orders
      summary: Order creation
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
        "403":
          description: Invalid ordering address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/assets/{assetName}/tokens/import:
    post:
      tags:
        - Assets
      summary: Import csv file to create transactions
      operationId: import_1
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportTokenRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
  /api/v1/wallets/{address}/close:
    put:
      tags:
        - Wallets
      summary: Closes a wallet
      operationId: close
      parameters:
        - name: address
          in: path
          description: Blockchain address linked to the wallet
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletCloseRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "403":
          description: Invalid admin address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/demo/logos/{type}:
    get:
      tags:
        - Demo
      summary: Download the logo file according to the file type (deprecated)
      operationId: downloadLogo_1
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - SHORT_LOGO
              - LONG_LOGO
              - ASSET
              - EMAIL_LOGO
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            text/plain or image/png: {}
        "404":
          description: Logo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Demo
      summary: Delete the logo file according to the file type (deprecated)
      operationId: deleteLogo_1
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - SHORT_LOGO
              - LONG_LOGO
              - ASSET
              - EMAIL_LOGO
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Logo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/users:
    get:
      tags:
        - Users
      summary: Search users
      operationId: searchUsers_1
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/UserSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponsePage'
  /api/v2/news-cards:
    get:
      tags:
        - News Cards
      summary: List available cards
      operationId: getCards_1
      parameters:
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardListResponse'
  /api/v1/assets/{assetName}/rates:
    get:
      tags:
        - Assets
      summary: Gets the rate for the asset
      operationId: getAssetRate
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetRateResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/bills/{ref}:
    get:
      tags:
        - Bills
      summary: Bill details
      operationId: getBill_1
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillDetailResponse'
        "404":
          description: Bill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/devices:
    post:
      tags:
        - End Users
      summary: Synchronize current device data for logged in end user
      operationId: registerOrSyncDevice_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/organizations/{organizationRef}/users:
    post:
      tags:
        - Organizations
      summary: Create a user in the organization
      operationId: createOrgUser
      parameters:
        - name: organizationRef
          in: path
          description: Unique reference of the organization
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgUserRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrgUserResponse'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/audit/{id}:
    get:
      tags:
        - Audit
      summary: Get detail about an audit record
      operationId: get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditResponse'
        "404":
          description: Audit record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/transactions/transaction-summary/export:
    get:
      tags:
        - Transactions
      operationId: generateTransactionSummaryExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/TransactionSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
  /api/v1/end-users/device-credentials/resend-validation-code:
    post:
      tags:
        - End Users
      summary: "\n            Send a new code that can be used to validate a device's pubKey\n            No more than 3 codes will be sent in a 15 minutes period\n        "
      operationId: resendDeviceCredentialValidationCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendDeviceCredentialCodeRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Successful request, even if no code was sent"
          content:
            application/json: {}
  /api/v1/notifications/status:
    post:
      tags:
        - Notifications
      summary: Update notification status according to id
      operationId: updateStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNotificationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/users/{sessionId}/import-validate-response:
    get:
      tags:
        - Users
      summary: Get user import validation detailed response
      operationId: getValidationDetailedResponse_3
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: User validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/customer-sponsorships/{id}:
    put:
      tags:
        - Customer Sponsorship
      summary: Update a customer sponsorship
      operationId: updateCustomerSponsorship
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSponsorshipRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSponsorshipResponse'
        "404":
          description: customer sponsorship not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Customer Sponsorship
      summary: Delete a customer sponsorship
      operationId: deleteCustomerSponsorship
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: customer sponsorship not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/device-credentials:
    post:
      tags:
        - End Users
      summary: Save the device's public key for logged in end user
      operationId: saveDeviceCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveDeviceCredentialRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/issuer-cash-outs-schedule/{id}:
    put:
      tags:
        - Issuer cash-out schedule Processes
      summary: Update issuer cash-out schedule data
      operationId: updateCashOutSchedule
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerCashOutScheduleUpdateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Issuer cash-out schedule Processes
      summary: Delete issuer cash-out schedule
      operationId: deleteCashOutSchedule_1
      parameters:
        - name: id
          in: path
          description: Id of the cash-out schedule record
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/{sessionId}/import-validate-status:
    get:
      tags:
        - End Users
      summary: Get end user import validation status response
      operationId: getValidationResults_1
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: End user validation import not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/demo/cards/{id}:
    put:
      tags:
        - Demo Cards (deprecated)
      summary: Update a card
      operationId: updateCard_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                card:
                  $ref: '#/components/schemas/NewsCardRequest'
                image:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardResponse'
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Demo Cards (deprecated)
      summary: Delete a card
      operationId: deleteCard_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardResponse'
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/loyalty-programs:
    get:
      tags:
        - Loyalty Programs
      summary: Gets the list of loyalty programs
      operationId: list_3
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyProgramListResponse'
    post:
      tags:
        - Loyalty Programs
      summary: Create a loyalty program
      operationId: createLoyaltyProgram
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyProgramCreationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyProgramResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/transactions:
    get:
      tags:
        - Transactions
      summary: Search transactions matching the given filter
      operationId: searchTransactions
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/TransactionSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailResponsePage'
    post:
      tags:
        - Transactions
      summary: Sends a quantity of an asset from an address to another
      operationId: createTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "403":
          description: Invalid from address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/assets/{assetName}/issue:
    post:
      tags:
        - Assets
      summary: Additional issuing of an asset
      operationId: issueMore
      parameters:
        - name: assetName
          in: path
          description: Asset name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueMoreRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxIdResponse'
        "403":
          description: Invalid issuing address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v2/wallets/{address}/balance:
    get:
      tags:
        - Wallets
      summary: Get the wallet balance
      operationId: getWalletBalance_1
      parameters:
        - name: address
          in: path
          description: Blockchain address linked to the wallet
          required: true
          schema:
            type: string
        - name: currency
          in: query
          required: false
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalanceResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                type: string
  /api/v1/scopes/import-organizations:
    post:
      tags:
        - Scopes
      summary: Import csv file to add organisations to scopes
      operationId: importOrganizationsToScopeFromFile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportWithScopeRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
        "404":
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/establishments:
    get:
      tags:
        - Establishments
      summary: Search establishments matching the given filter
      operationId: searchEstablishments_1
      parameters:
        - name: orgRef
          in: query
          required: false
          schema:
            type: string
        - name: latitude
          in: query
          required: false
          schema:
            type: number
        - name: longitude
          in: query
          required: false
          schema:
            type: number
        - name: maxDistance
          in: query
          required: false
          schema:
            type: string
        - name: tags
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          required: false
          schema:
            type: string
        - name: phoneNumber
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstablishmentDetailResponsePage'
    post:
      tags:
        - Establishments
      summary: Create an establishment
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEstablishmentRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/users/{userId}/deactivate:
    patch:
      tags:
        - Users
      summary: De-activates a user
      operationId: deactivate
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users/import-validate:
    post:
      tags:
        - Users
      summary: Validate import csv file to create users
      operationId: importValidate_2
      parameters:
        - name: sessionId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserImportSessionValidateResponse'
        "409":
          description: Import in progress
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserImportSessionValidateResponse'
  /api/v2/end-users:
    post:
      tags:
        - End Users
      summary: Registers a new end user
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndUserRegisterRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/demo/v1/customers/{userId}/activate:
    post:
      tags:
        - Customers
      summary: Activates a newly registered customer
      operationId: activate_1
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerActivateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRegisterResponse'
        "403":
          description: User could not be activated with given code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/wallets/export:
    get:
      tags:
        - Wallets
      summary: Export search of wallet
      operationId: generateWalletExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/WalletSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: typeExport
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs-schedule:
    post:
      tags:
        - Cash-out schedule Processes
      summary: Schedule the cash-out process
      operationId: createCashOutSchedule_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashOutScheduleRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/open-credits/{ref}/claim:
    post:
      tags:
        - OpenCredit
      summary: Claim a OpenCredit
      operationId: claimOpenCredit
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimOpenCreditRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenCreditStatusResponse'
        "403":
          description: Invalid claimed address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: OpenCredit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/transactions/resell:
    post:
      tags:
        - Transactions
      summary: Resell a quantity of an asset
      operationId: resell
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResellRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "400":
          description: Invalid asset or insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Invalid address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/transactions/import-validate:
    post:
      tags:
        - Transactions
      summary: Validate import csv file containing transactions
      operationId: importValidate_3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TxImportValidateSessionResponse'
        "409":
          description: Import in progress
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TxImportValidateSessionResponse'
  /api/v1/bills/export:
    get:
      tags:
        - Bills
      summary: Export search of bill
      operationId: generateBillExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BillSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: Bill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/end-users/contacts:
    get:
      tags:
        - End Users
      summary: Get end user contacts
      operationId: getEndUserContact
      parameters:
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EndUserContactRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                type: string
  /api/v1/payments/webhook:
    post:
      tags:
        - payment-controller
      operationId: paymentWebhook
      parameters:
        - name: Origin
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                all:
                  type: object
                  additionalProperties:
                    type: object
                  writeOnly: true
                empty:
                  type: boolean
              additionalProperties:
                type: array
                items:
                  type: object
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
  /api/v1/assets/{assetName}/stats-histogram:
    get:
      tags:
        - Assets
      summary: Get histogram of statistics about a specific asset in a certain period
      operationId: getAssetStatsHistogram
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetStatsHistogramResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/assets/{assetName}/resume:
    get:
      tags:
        - Assets
      summary: Gets the resume for the asset
      operationId: getAssetResume
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Asset not found
          content:
            application/json: {}
  /api/v1/wallets/{address}/stats-histogram:
    get:
      tags:
        - Wallets
      summary: Get histogram of statistics about a specific wallet in a certain period
      operationId: getWalletStatsHistogram
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStatsHistogramResponse'
        "404":
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/bills:
    get:
      tags:
        - Bills
      summary: Search bills matching the given filter
      operationId: searchBills_1
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BillSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillDetailPage'
    post:
      tags:
        - Bills
      summary: Bill creation
      operationId: createBill_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillResponse'
        "403":
          description: Invalid billing address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/news-cards:
    get:
      tags:
        - News Cards
      summary: List available cards
      operationId: getCards_2
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardListResponse'
    post:
      tags:
        - News Cards
      summary: Create a new card
      operationId: createCard
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                card:
                  $ref: '#/components/schemas/NewsCardRequest'
                image:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCardResponse'
        "400":
          description: Maximum card count reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/scopes/import-users:
    post:
      tags:
        - Scopes
      summary: Import csv file to link users to a scope
      operationId: importUsersToScopeFromFile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportWithScopeRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
        "404":
          description: Scope not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/transactions:
    get:
      tags:
        - Transactions
      summary: Search transactions matching the given filter
      operationId: searchTransactions_1
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/TransactionSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailResponsePage'
    post:
      tags:
        - Transactions
      summary: Sends a quantity of an asset from an address to another
      operationId: createTransaction_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "403":
          description: Invalid from address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/demo/v1/customers/set-password:
    post:
      tags:
        - Customers
      summary: Define a new password for a customer with the otp code requested previously
      operationId: setPassword_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "403":
          description: Password could not be set with the given code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/organizations/autocomplete:
    get:
      tags:
        - Organizations
      summary: Organization autocomplete
      operationId: organizationAutocomplete
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: typeIn
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationAutocompleteResponsePage'
  /api/v1/transactions/transaction-summary:
    get:
      tags:
        - Transactions
      operationId: getTransactionSummary
      parameters:
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionSummary'
  /api/v1/import-sessions:
    get:
      tags:
        - Import Sessions
      summary: Verify if an import is in progress
      operationId: getImportSessionStatus
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - USER
              - END_USER
              - ORG
              - TRANSACTION
              - CASH_OUT
              - SCOPE
              - TOKENS
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportStatusResponse'
  /api/v1/wallets/{address}/tokens/{assetName}:
    get:
      tags:
        - Wallets
      summary: Gets the wallet balance detailed by token for a given NFT asset
      operationId: getWalletTokenBalance
      parameters:
        - name: address
          in: path
          description: Blockchain address linked to the wallet
          required: true
          schema:
            type: string
        - name: assetName
          in: path
          description: Name of the NFT asset
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalanceResponse'
        "404":
          description: Wallet or Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/resell:
    post:
      tags:
        - Purchase And Resell
      summary: Resell a quantity of an asset
      operationId: resell_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResellRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "400":
          description: Invalid asset or insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Invalid address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/organizations/{organizationRef}/wallets:
    post:
      tags:
        - Organizations
      summary: Create a new wallet for the organization
      operationId: createOrganizationWallet_1
      parameters:
        - name: organizationRef
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletShortResponse'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/activate-imported:
    post:
      tags:
        - End Users
      summary: Set password for an imported end user
      operationId: activateImportedEndUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportedEndUserActivationRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "403":
          description: End user could not be activated with given code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/purchase:
    post:
      tags:
        - Purchase And Resell
      summary: Purchases a quantity of an asset
      operationId: purchase_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "403":
          description: Invalid purchase address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/users/{sessionId}/import-validate-status:
    get:
      tags:
        - Users
      summary: Get user import validation status response
      operationId: getValidationResults_2
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: User validation import not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/organizations/import:
    post:
      tags:
        - Organizations
      summary: Import csv file to create organizations
      operationId: import_2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
  /api/v1/end-users/reset-password:
    post:
      tags:
        - End Users
      summary: "\n            Trigger the password reset workflow for an end user matching the given email, if any.\n            No more than 3 codes will be sent in a 15 minutes period\n        "
      operationId: resetPassword_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Successful request, even if no matching user was found"
          content:
            application/json: {}
  /api/v1/transactions/import/source-wallets:
    get:
      tags:
        - Transactions
      summary: Get the 10 first allowed source wallets for a mass transfer
      operationId: getImportSourceWallets
      parameters:
        - name: orgTypeIn
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/demo/v1/merchants/{orgRef}/wallets/{address}/qrcode:
    get:
      tags:
        - Merchants
      summary: Gets the payment QR-Code for a merchant
      operationId: generateQrCode_1
      parameters:
        - name: orgRef
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            image/png: {}
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/logos:
    put:
      tags:
        - Logo
      summary: Upload logos
      operationId: uploadLogos_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shortLogo:
                  type: string
                  format: binary
                longLogo:
                  type: string
                  format: binary
                emailLogo:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "422":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/end-users/profiles:
    get:
      tags:
        - End Users
      summary: Get available profiles for end user import
      operationId: listProfiles_1
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilesResponse'
  /api/v1/open-credits/{ref}/cancel:
    post:
      tags:
        - OpenCredit
      summary: Cancel a open credit
      operationId: cancelOpenCredit
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOpenCreditRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenCreditStatusResponse'
        "404":
          description: Open credit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/kyc-rules/{assetName}:
    get:
      tags:
        - Kyc Rules
      summary: Gets the list of kyc rules for a specific asset
      operationId: assetKycRule
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycRuleListResponse'
  /api/v1/end-users/{userId}/resend-activation-code:
    post:
      tags:
        - End Users
      summary: "\n            Send a new code that can be used to activate a user pending activation.\n            No more than 3 codes will be sent in a 15 minutes period\n        "
      operationId: resendActivationCode
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Successful request, even if no code was sent"
          content:
            application/json: {}
  /api/v1/cash-outs/import-validate-inject/{sessionId}:
    post:
      tags:
        - Cash-out Processes
      summary: Cash-out import validation data inject started successfully
      operationId: injectImportValidateData_3
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out import validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/assets/{assetName}/permissions:
    get:
      tags:
        - Assets
      summary: Gets the addresses having permissions over an asset
      operationId: getAssetPermissions
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
        - name: params
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PermissionFilter'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetPermissionsResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/{userId}/activate:
    post:
      tags:
        - End Users
      summary: Activates a newly registered end user
      operationId: activate_2
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndUserActivateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponse'
        "403":
          description: User could not be activated with given code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/assets/logo:
    get:
      tags:
        - Assets
      summary: Download a logo of an asset or all logos
      operationId: getAssetLogo_1
      parameters:
        - name: assetName
          in: query
          required: false
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLogoResponse'
        "404":
          description: Logo of assetName not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/transactions/import:
    post:
      tags:
        - Transactions
      summary: Import csv file to create transactions
      operationId: import_3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
  /api/v1/bills/{ref}/qrcode:
    get:
      tags:
        - Bills
      summary: Get a QR code image that can be scanned by customer to pay the bill
      operationId: getBillQrCode
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            image/png: {}
        "404":
          description: Bill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/customer-sponsorships/code/{id}:
    get:
      tags:
        - Customer Sponsorship
      summary: Return the code of sponsorship for the user and the program
      operationId: getCode
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSponsorshipResponse'
        "404":
          description: customer sponsorship or end user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/demo/v1/customers/reset-password:
    post:
      tags:
        - Customers
      summary: "\n            Trigger the password reset workflow for a customer matching the given email, if any.\n            No more than 3 codes will be sent in a 15 minutes period\n        "
      operationId: resetPassword_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Successful request, even if no matching user was found"
          content:
            application/json: {}
  /api/demo/v1/customers:
    post:
      tags:
        - Customers
      summary: Registers a new customer
      operationId: register_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRegisterRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRegisterResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/establishments/categories:
    get:
      tags:
        - Establishments
      summary: Gets the list of categories
      operationId: getCategories
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
  /api/v1/cash-outs/{cashOutRef}/refuse:
    put:
      tags:
        - Cash-out Processes
      summary: Refuse the cash-out transaction
      operationId: refuse
      parameters:
        - name: cashOutRef
          in: path
          description: Ref of the cash-out
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefuseCashoutRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/profile/kyc-status:
    get:
      tags:
        - End Users
      summary: Gets kyc status of the logged in user
      operationId: getKycStatus
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycStatusListResponses'
  /api/v1/cash-outs-schedule/{assetName}/{walletAddress}:
    get:
      tags:
        - Cash-out schedule Processes
      summary: Search cash-out schedule bay asset name and wallet address
      operationId: findCashOutScheduleByAssetNameAndWalletAddress
      parameters:
        - name: assetName
          in: path
          description: Id of the cash-out schedule record
          required: true
          schema:
            type: string
        - name: walletAddress
          in: path
          description: Id of the cash-out schedule record
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashOutDetail'
        "404":
          description: Cash-out schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/business-sponsorships/{id}:
    put:
      tags:
        - Business Sponsorship
      summary: Update a business sponsorship
      operationId: updateBusinessSponsorship
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessSponsorshipRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessSponsorshipResponse'
        "404":
          description: business sponsorship not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
    delete:
      tags:
        - Business Sponsorship
      summary: Delete a business sponsorship
      operationId: deleteCustomerSponsorship_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "204":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: business sponsorship not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/wallets/search-by-phonenumber:
    post:
      tags:
        - Wallets
      summary: Retrieve wallets associated to a list of given phonenumber
      operationId: searchByPhoneNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletsByPhoneNumbersRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletsByPhoneNumbersResponse'
  /api/v1/end-users/{userId}/resend-activation-link:
    post:
      tags:
        - End Users
      summary: Send a new link to activate a user pending activation.
      operationId: resendActivationLink
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/bills/{ref}/cancel:
    post:
      tags:
        - Bills
      summary: Cancel a bill
      operationId: cancelBill
      parameters:
        - name: ref
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBillRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillStatusResponse'
        "404":
          description: Bill not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/import-validate-inject/{sessionId}:
    post:
      tags:
        - End Users
      summary: End user import validation data inject started successfully
      operationId: injectImportValidateData_4
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: End user import validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/organizations/{sessionId}/import-validate-status:
    get:
      tags:
        - Organizations
      summary: Get organization import validation status response
      operationId: getValidationResults_3
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Organization validation import not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/wallets:
    get:
      tags:
        - Wallets
      summary: Search wallets
      operationId: search_1
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/WalletSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletSearchResponsePage'
  /api/demo/v1/customers/{userId}/resend-activation-code:
    post:
      tags:
        - Customers
      summary: "\n            Send a new code that can be used to activate a user pending activation.\n            No more than 3 codes will be sent in a 15 minutes period\n        "
      operationId: resendActivationCode_1
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: "Successful request, even if no code was sent"
          content:
            application/json: {}
  /api/v1/wallets/search-by-phonenumber:
    post:
      tags:
        - Wallets
      summary: Retrieve wallets associated to a list of given phonenumber
      operationId: searchByPhoneNumber_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletByNumberRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletByNumberResponse'
  /api/v1/orders/{orderRef}/refuse:
    post:
      tags:
        - Orders
      summary: Order refusal
      operationId: refuseOrder
      parameters:
        - name: orderRef
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderAbortRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
        "404":
          description: Order not found or not allowed to be refused
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users/import:
    post:
      tags:
        - Users
      summary: Import csv file to create users
      operationId: import_4
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
  /api/v1/users/profile:
    get:
      tags:
        - Users
      summary: Get detail of the logged in user
      operationId: getProfile_1
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
  /api/v1/cash-outs/{cashOutRef}/validate:
    put:
      tags:
        - Cash-out Processes
      summary: Validate the cash-out request
      operationId: validate
      parameters:
        - name: cashOutRef
          in: path
          description: Ref of the cash-out
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/demo/v1/customers/devices:
    post:
      tags:
        - Customers
      summary: Synchronize current device data for logged in customer
      operationId: registerOrSyncDevice_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/organizations/{sessionId}/import-validate-response:
    get:
      tags:
        - Organizations
      summary: Get organization import validation detailed response
      operationId: getValidationDetailedResponse_4
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Organization validation results not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/{userId}/email:
    get:
      tags:
        - End Users
      summary: Get email history of an existing end user
      operationId: getEmailHistory
      parameters:
        - name: userId
          in: path
          description: Unique identifier of the end user
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailHistoryResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/resend-activation-link-email:
    post:
      tags:
        - End Users
      summary: Send a new link to activate a user pending activation.
      operationId: resendActivationLinkWithEmail
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
  /api/v1/assets/{assetName}/stats:
    get:
      tags:
        - Assets
      summary: Get statistics about a specific asset
      operationId: getAssetStats
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetStatsResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/versions/mobile/{type}:
    get:
      tags:
        - Mobile App Versions
      summary: Retrieve version information for the given mobile os type
      operationId: getMobileVersion
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - iOS
              - Android
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileVersionResponse'
        "404":
          description: Version information not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Mobile App Versions
      summary: Update version information for the given mobile os type
      operationId: update_1
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - iOS
              - Android
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileVersionRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "401":
          description: Authentication needed
        "422":
          description: |
            * latestVersion
              * NotBlank
              * Matches
            * minimumVersion
              * NotBlank
              * Matches
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
        "404":
          description: Mobile version not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JWT: []
  /api/demo/v1/customers/{userId}/devices:
    get:
      tags:
        - Customers
      summary: Get device details of the given customer
      operationId: getDevice
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceListResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/rates/{assetName}:
    post:
      tags:
        - Rates
      summary: Define rate for the asset
      operationId: createRate
      parameters:
        - name: assetName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetRateResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs/{sessionId}/import-validate-status:
    get:
      tags:
        - Cash-out Processes
      summary: Get cash-out import validation status response
      operationId: getValidationResults_4
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json: {}
        "404":
          description: Cash-out validation import not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/users/export:
    get:
      tags:
        - Users
      summary: Export search of user
      operationId: generateUserExport
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/UserSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - CSV
              - XLSX
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StreamingResponseBody'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/demo/v1/merchants:
    post:
      tags:
        - Merchants
      summary: "Registers a new merchant, creating an Organization, a wallet with send and receive permissions, and an admin user"
      operationId: registerMerchant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantRegisterRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "201":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRegisterResponse'
        "404":
          description: Merchant or wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
  /api/v1/integrations:
    get:
      tags:
        - Integartion
      summary: Search integration matching the given filter
      operationId: searchIntegrations
      parameters:
        - name: filter
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/IntegrationSearchBean'
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDetailResponsePage'
  /api/v1/users/{userId}/devices:
    get:
      tags:
        - Users
      summary: Get device details of the given user
      operationId: getDevice_1
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceListResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/end-users/{userId}/devices:
    get:
      tags:
        - End Users
      summary: Get device details of the given end user
      operationId: getDevice_2
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceListResponse'
        "404":
          description: End User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/cash-outs/import-validate:
    post:
      tags:
        - Cash-out Processes
      summary: Import csv file validation to create cash outs
      operationId: importValidate_4
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImportValidateSessionResponse'
        "409":
          description: Import in progress
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImportValidateSessionResponse'
  /api/v1/cash-outs/import:
    post:
      tags:
        - Cash-out Processes
      summary: Import csv file to create cash-outs
      operationId: import_5
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                importRequest:
                  $ref: '#/components/schemas/ImportRequest'
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
        "409":
          description: Import in progress
  /api/v1/organizations/scopes:
    get:
      tags:
        - Organizations
      summary: List organization scopes
      operationId: listOrgScopes
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgScopeListResponse'
  /api/v1/assets/{assetName}/burn:
    post:
      tags:
        - Assets
      summary: Burning of a quantity of an asset
      operationId: burn
      parameters:
        - name: assetName
          in: path
          description: Asset name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BurnAssetRequest'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxIdResponse'
        "403":
          description: Invalid address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Asset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
components:
  schemas:
    ErrorResponse:
      required:
        - error
        - message
        - path
        - status
        - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
    WalletShortResponse:
      required:
        - address
        - creationDate
        - permissions
        - pubKey
        - status
        - type
      type: object
      properties:
        name:
          type: string
          description: "Descriptive name of the wallet, optional"
        address:
          type: string
          description: Blockchain address of the wallet
        pubKey:
          type: string
          description: Public key associated with the blockchain address of the wallet
        type:
          type: string
          description: Type of the wallet (owned by user or organization)
          enum:
            - USER
            - ORGANIZATION
        creationDate:
          type: string
          description: Date of creation of the wallet
          format: date-time
        permissions:
          type: array
          description: Blockchain permissions of the wallet
          items:
            type: string
            description: Blockchain permissions of the wallet
        status:
          type: string
          description: Status of the wallet
          enum:
            - ACTIVE
            - CLOSED
    UnprocessableEntity:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationConstraint:
      required:
        - name
        - params
      type: object
      properties:
        name:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ValidationParam'
    ValidationError:
      required:
        - constraint
        - message
        - property
      type: object
      properties:
        property:
          type: string
        value:
          type: object
        message:
          type: string
        constraint:
          $ref: '#/components/schemas/ValidationConstraint'
    ValidationParam:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        value:
          type: object
    CreateWalletRequest:
      type: object
      properties:
        name:
          type: string
          description: "Name of the wallet, optional"
        pubKey:
          type: string
          description: |-
            An optional public key matching the following format: https://www.multichain.com/developers/address-key-format/<br />
            If specified, will be used to compute the address of the wallet to create.<br />
            If not, an address for the wallet will be automatically computed by the platform.
        orgRef:
          type: string
          description: Reference of the organization associated with the enduser wallet. optional
    PasswordUpdateRequest:
      required:
        - newPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    AssetRateListResponse:
      required:
        - assetRates
      type: object
      properties:
        assetRates:
          type: array
          items:
            $ref: '#/components/schemas/AssetRateResponse'
    AssetRateResponse:
      required:
        - code
        - name
        - rate
      type: object
      properties:
        name:
          type: string
          description: Asset name
        code:
          type: string
          description: Asset code
        rate:
          type: object
          additionalProperties:
            type: number
            description: Asset rate for each accepted currency code
          description: Asset rate for each accepted currency code
    CashOutDetail:
      required:
        - assetName
        - organisation
        - ref
        - status
        - walletAddress
      type: object
      properties:
        ref:
          type: string
        requestDate:
          type: string
          format: date-time
        organisation:
          type: string
        assetName:
          type: string
        quantity:
          type: number
        status:
          type: string
          enum:
            - PENDING
            - COMPLETED
            - REFUSED
        cashOutTxId:
          type: string
        walletAddress:
          type: string
        responseDate:
          type: string
          format: date-time
        reason:
          type: string
    CashOutSearchBean:
      type: object
      properties:
        ref:
          type: string
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        organisation:
          type: string
        organisationWalletAddress:
          type: string
        assetName:
          type: string
        cashOutTxId:
          type: string
        status:
          type: array
          items:
            type: string
            enum:
              - PENDING
              - COMPLETED
              - REFUSED
        minAmount:
          type: number
        maxAmount:
          type: number
    Pageable:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    WalletEditRequest:
      type: object
      properties:
        name:
          type: string
          description: "Name of the wallet, optional"
    AutocompleteEndUserResponse:
      required:
        - friendlyName
        - userId
      type: object
      properties:
        userId:
          type: string
        friendlyName:
          type: string
    AutocompleteEndUserResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageAutocompleteEndUserResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AutocompleteEndUserResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageAutocompleteEndUserResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AutocompleteEndUserResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    UpdateAssetRequest:
      required:
        - code
      type: object
      properties:
        code:
          type: string
          description: New asset code
        label:
          type: string
          description: New asset label
        maxAllowedBalance:
          type: number
          description: New asset max amount for end-user wallet
        expirationPeriod:
          type: integer
          description: New expiration period of the asset in number of days
          format: int32
        txCount:
          type: integer
          description: New max transaction number for which the asset must be spent
          format: int32
        assetColor:
          type: string
          description: New asset color
    CurrenciesListResponse:
      required:
        - currencies
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyResponse'
    CurrencyResponse:
      required:
        - currency
      type: object
      properties:
        currency:
          type: string
          description: Name of the currency
    MobileVersionResponse:
      required:
        - latestVersion
        - published
      type: object
      properties:
        latestVersion:
          type: string
          description: Most recent version
        published:
          type: string
          description: Most recent version publication date
          format: date-time
        minimumVersion:
          type: string
          description: Minimum version required for compatibility
    WalletPermissionRequest:
      required:
        - action
        - adminAddress
        - permissions
      type: object
      properties:
        adminAddress:
          type: string
          description: Blockchain address used to grant or revoke the permissions. This address must have been granted the 'admin' permission beforehand.
        action:
          type: string
          description: Public key linked to the blockchain address of the organization
          enum:
            - GRANT
            - REVOKE
        permissions:
          type: array
          description: List of permissions to grant or revoke
          externalDocs:
            description: Permissions management documentation
            url: https://www.multichain.com/developers/permissions-management/
          items:
            type: string
            description: List of permissions to grant or revoke
            externalDocs:
              description: Permissions management documentation
              url: https://www.multichain.com/developers/permissions-management/
    ImportRequest:
      type: object
      properties:
        groupName:
          type: string
          description: Group name of the end user
    EndUserImportSessionValidateResponse:
      required:
        - importValidationSessionId
      type: object
      properties:
        importValidationSessionId:
          type: integer
          description: Id of the validation import session
          format: int64
    OpenCreditResponse:
      required:
        - ref
        - token
      type: object
      properties:
        ref:
          type: string
          description: Unique reference of the created openCredit
        token:
          type: string
          description: Access token which will allow the customer to pay the openCredit
    OpenCreditRequest:
      required:
        - amount
        - asset
        - wallet
      type: object
      properties:
        asset:
          type: string
          description: Name of the asset to be used as payment
        wallet:
          type: string
          description: issuer wallet to be used as payment
        amount:
          type: number
          description: Amount requested as payment
        externalRef:
          type: string
          description: Optional reference of this openCredit in an external system
        data:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata associated with this openCredit
          description: Optional metadata associated with this openCredit
        currencyFiat:
          type: string
          description: Optional currency associated with this openCredit
        tokens:
          type: object
          additionalProperties:
            type: integer
            description: Optional token selection for open credit of NFT
            format: int64
          description: Optional token selection for open credit of NFT
    NewsCardResponse:
      required:
        - backgroundColorCode
        - id
        - scopes
        - text
        - textColorCode
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: object
          additionalProperties:
            type: string
        textColorCode:
          type: string
        backgroundColorCode:
          type: string
        imageName:
          type: string
        imageBase64:
          type: string
        scopes:
          type: array
          items:
            type: string
        androidUrl:
          type: string
        iosUrl:
          type: string
    GroupResponse:
      required:
        - organizationRefs
        - ref
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
        organizationRefs:
          type: array
          items:
            type: string
    OrganizationShortResponse:
      required:
        - creationDate
        - name
        - organizationRef
      type: object
      properties:
        organizationRef:
          type: string
          description: Unique reference of the organization
        name:
          type: string
          description: Name of the organization
        externalRef:
          type: string
          description: "External reference of the organization, optional"
        creationDate:
          type: string
          description: Creation date of the organization
          format: date-time
        groups:
          type: array
          description: Organisation groups
          items:
            type: string
            description: Organisation groups
        type:
          type: string
          description: Organization type
        website:
          type: string
          description: Organization website
        scopes:
          type: array
          description: Organisation scope
          items:
            type: string
            description: Organisation scope
      description: Organizations in the scope
    UserDetailResponse:
      required:
        - creationDate
        - status
        - userId
      type: object
      properties:
        userId:
          type: string
          description: User ID
        login:
          type: string
          description: Login of the user
        status:
          type: string
          description: Status of the user
          enum:
            - ACTIVE
            - DEACTIVATED
            - CREATED
            - DELETE
        reason:
          type: string
          description: Reason if status is deactived
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        alias:
          type: string
          description: Alias of the user
        email:
          type: string
          description: "Email address of the user, also used as user login"
        phoneNumber:
          type: string
          description: Phone number of the user (optional)
        creationDate:
          type: string
          description: Creation date of the user
          format: date-time
        org:
          $ref: '#/components/schemas/OrganizationShortResponse'
        group:
          type: string
          description: Organization group of the user (mutually exclusive with org)
        profile:
          type: string
          description: Profile name of the user
        profileId:
          type: string
          description: Profile id of the user
        preferences:
          type: object
          additionalProperties:
            type: string
            description: Preferences of the user
          description: Preferences of the user
        lastLogin:
          type: string
          description: Last login date of the user
          format: date-time
    ScopeRequest:
      required:
        - ref
        - restrictAssets
        - restrictEndUsers
        - restrictOrg
      type: object
      properties:
        ref:
          type: string
          description: Scope name
        description:
          type: string
          description: Scope description
        restrictAssets:
          type: boolean
          description: Restriction assets
        restrictOrg:
          type: boolean
          description: Restriction organization
        restrictEndUsers:
          type: boolean
          description: Restriction user
    SetPasswordRequest:
      required:
        - email
        - otp
        - password
      type: object
      properties:
        email:
          type: string
        otp:
          type: string
        password:
          type: string
    Group:
      required:
        - organizations
        - persisted
        - ref
        - users
      type: object
      properties:
        ref:
          type: string
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        users:
          type: array
          items:
            $ref: '#/components/schemas/OrgUser'
        name:
          type: string
        id:
          type: integer
          format: int64
        persisted:
          type: boolean
    OrgUser:
      required:
        - persisted
        - profile
        - userId
      type: object
      properties:
        userId:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
        organization:
          $ref: '#/components/schemas/Organization'
        group:
          $ref: '#/components/schemas/Group'
        scope:
          $ref: '#/components/schemas/Scope'
        id:
          type: integer
          format: int64
        persisted:
          type: boolean
    Organization:
      required:
        - creationDate
        - deleted
        - groups
        - name
        - persisted
        - ref
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
        externalRef:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        creationDate:
          type: string
          format: date-time
        type:
          type: string
        deleted:
          type: boolean
        website:
          type: string
        id:
          type: integer
          format: int64
        persisted:
          type: boolean
      description: Organizations in the scope
    Profile:
      required:
        - groupId
        - name
        - path
        - persisted
        - userScope
      type: object
      properties:
        name:
          type: string
        groupId:
          type: string
        path:
          type: string
        userScope:
          type: string
          enum:
            - SELF
            - PARENT
            - ALL
        profileScope:
          type: string
        endUserProfileScope:
          type: string
        id:
          type: integer
          format: int64
        persisted:
          type: boolean
    Scope:
      required:
        - persisted
        - ref
        - restrictAssets
        - restrictCards
        - restrictEndUsers
        - restrictOrgs
        - subScopes
      type: object
      properties:
        ref:
          type: string
        description:
          type: string
        restrictAssets:
          type: boolean
        restrictOrgs:
          type: boolean
        restrictCards:
          type: boolean
        restrictEndUsers:
          type: boolean
        modificationDate:
          type: string
          format: date-time
        assets:
          type: array
          items:
            type: integer
            format: int64
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        subScopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        id:
          type: integer
          format: int64
        persisted:
          type: boolean
      description: Sub-scopes of the scope
    UserDetail:
      required:
        - creationDate
        - email
        - firstName
        - isEnabled
        - isPhoneVerified
        - lastName
        - login
        - preferences
        - profile
        - profileId
        - userId
      type: object
      properties:
        userId:
          type: string
        creationDate:
          type: string
          format: date-time
        login:
          type: string
        isEnabled:
          type: boolean
        isPhoneVerified:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        alias:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        org:
          $ref: '#/components/schemas/Organization'
        group:
          type: string
        profile:
          type: string
        profileId:
          type: string
        preferences:
          type: object
          additionalProperties:
            type: string
        lastLogin:
          type: string
          format: date-time
        reason:
          type: string
    OrderStatusResponse:
      required:
        - ref
        - status
      type: object
      properties:
        ref:
          type: string
          description: Order reference
        status:
          type: string
          description: Order status
          enum:
            - CREATED
            - CANCELLED
            - PENDING
            - REFUSED
            - COMPLETED
        txId:
          type: string
          description: Id of the blockchain transaction associated with the order status
    OrderAbortRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata to associate with the order abortion
          description: Optional metadata to associate with the order abortion
        reason:
          type: string
          description: Optional reason to associate with the order abortion
    PageUserSearchResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    UserSearchResponse:
      required:
        - creationDate
        - email
        - firstName
        - lastName
        - login
        - userId
      type: object
      properties:
        userId:
          type: string
          description: User ID
        login:
          type: string
          description: Login of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: "Email address of the user, also used as user login"
        phoneNumber:
          type: string
          description: Phone number of the user (optional)
        creationDate:
          type: string
          description: Creation date of the user
          format: date-time
        org:
          $ref: '#/components/schemas/OrganizationShortResponse'
        group:
          $ref: '#/components/schemas/GroupResponse'
        profile:
          type: string
          description: Profile name of the user
        lastLogin:
          type: string
          description: Last login date of the user
          format: date-time
    UserSearchResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageUserSearchResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    UserSearchBean:
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        login:
          type: string
        phoneNumber:
          type: string
        org:
          type: string
        group:
          type: string
        createdFrom:
          type: string
          format: date
        createdTo:
          type: string
          format: date
        profileIn:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
    TransactionSearchBean:
      type: object
      properties:
        txId:
          type: string
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        senderAddress:
          type: string
        receiverAddress:
          type: string
        walletAddress:
          type: string
        asset:
          type: string
        assets:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            type: string
        minAmount:
          type: number
        maxAmount:
          type: number
        senderUserId:
          type: string
        receiverUserId:
          type: string
        senderOrgId:
          type: string
        senderAlias:
          type: string
        receiverOrgId:
          type: string
        receiverAlias:
          type: string
        endUserId:
          type: string
    StreamingResponseBody:
      type: object
    LoyaltyProgramCreationRequest:
      required:
        - name
        - percentage
        - rewardAsset
        - triggerAssets
      type: object
      properties:
        name:
          type: string
          description: Loyalty program's name
        rewardAsset:
          type: string
          description: Asset that will be credited as loyalties tokens
        triggerAssets:
          type: array
          description: List of assets that create automatically the loyalties tokens if used for a payment transaction
          items:
            type: string
            description: List of assets that create automatically the loyalties tokens if used for a payment transaction
        percentage:
          type: number
          description: Percentage of the transaction amount to calculate the loyalty tokens quantity to send to the end use
        maxAmount:
          type: number
          description: Maximal amount that can be calculated and credited to the end user
        startingDate:
          type: string
          description: Date to start the loyalty program
          format: date-time
        endingDate:
          type: string
          description: Date to start the loyalty program
          format: date-time
    OrganizationImportSessionValidateResponse:
      required:
        - importValidationSessionId
      type: object
      properties:
        importValidationSessionId:
          type: integer
          description: Id of the validation import session
          format: int64
    BillResponse:
      required:
        - ref
        - token
      type: object
      properties:
        ref:
          type: string
          description: Unique reference of the created bill
        token:
          type: string
          description: Access token which will allow the customer to pay the bill
    BillRequest:
      required:
        - amount
        - asset
        - wallet
      type: object
      properties:
        asset:
          type: string
          description: Name of the asset to be used as payment
        amount:
          type: number
          description: Amount requested as payment
        wallet:
          type: string
          description: Wallet address requesting the payment
        externalRef:
          type: string
          description: Optional reference of this bill in an external system
        data:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata associated with this bill
          description: Optional metadata associated with this bill
    AssetDetail:
      required:
        - assetName
        - hasLogo
      type: object
      properties:
        assetName:
          type: string
        hasLogo:
          type: boolean
    CustomerSponsorshipRecordPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageCustomerSponsorshipResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSponsorshipResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    CustomerSponsorshipResponse:
      required:
        - beneficiaryAsset
        - beneficiaryReward
        - id
        - initiatorAsset
        - initiatorReward
        - isDefault
        - issuerWallet
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        beneficiaryAsset:
          $ref: '#/components/schemas/AssetDetail'
        beneficiaryReward:
          type: number
        initiatorAsset:
          $ref: '#/components/schemas/AssetDetail'
        initiatorReward:
          type: number
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        graceDate:
          type: string
          format: date-time
        isDefault:
          type: boolean
        issuerWallet:
          type: string
    PageCustomerSponsorshipResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerSponsorshipResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    AssetWhiteListRequest:
      required:
        - assets
      type: object
      properties:
        assets:
          type: array
          description: "List of allowed assets, by name. Use empty list for unrestricted access"
          items:
            type: string
            description: "List of allowed assets, by name. Use empty list for unrestricted access"
    KycRuleListResponse:
      required:
        - kycRules
      type: object
      properties:
        kycRules:
          type: array
          items:
            $ref: '#/components/schemas/KycRuleResponse'
    KycRuleResponse:
      required:
        - alert
        - asset
        - blockingChoice
        - id
        - level
        - threshold
        - txTypes
        - type
      type: object
      properties:
        id:
          type: integer
          description: id of the kyc rule
          format: int64
        level:
          type: integer
          description: Kyc level
          format: int32
        threshold:
          type: integer
          description: Kyc threshold
          format: int32
        asset:
          type: string
          description: Asset concerned by the Kyc rule
        currency:
          type: string
          description: Currency defined in Kyc rule
        txTypes:
          type: array
          description: Transaction types concerned by the Kyc rule
          items:
            type: string
            description: Transaction types concerned by the Kyc rule
        type:
          type: string
          description: Kyc rule type
          enum:
            - SEND
            - RECEIVE
            - BALANCE
        period:
          type: integer
          description: Number of consecutive days used to calculate the transferred assets quantity
          format: int32
        blockingChoice:
          type: string
          description: Option indicating the blocking level of the KYC
          enum:
            - BLOCK
            - ADMIN
            - PASS
        alert:
          type: boolean
          description: Flag indicating if the rule should trigger an alert email
        basis:
          type: string
          description: Flag indicating the type of calculation basis of rule
          enum:
            - UNITARY
            - YEARLY
            - ROLLING
    ScopeDetailResponse:
      required:
        - endUserNumber
        - orgNumber
        - ref
        - restrictAssets
        - restrictEndUsers
        - restrictOrgs
        - userNumber
      type: object
      properties:
        ref:
          type: string
          description: Scope name
        description:
          type: string
          description: Scope description
        restrictAssets:
          type: boolean
          description: Restrict by assets
        restrictOrgs:
          type: boolean
          description: Restrict by organizations
        restrictEndUsers:
          type: boolean
          description: Restrict by end-users
        assets:
          type: array
          description: Assets in the scope
          items:
            type: string
            description: Assets in the scope
        subScopes:
          type: array
          description: Sub-scopes of the scope
          items:
            $ref: '#/components/schemas/Scope'
        organizations:
          type: array
          description: Organizations in the scope
          items:
            $ref: '#/components/schemas/Organization'
        orgNumber:
          type: integer
          description: Number of organizations contained in the scope
          format: int64
        userNumber:
          type: integer
          description: Number of users contained in the scope
          format: int64
        endUserNumber:
          type: integer
          description: Number of end-users contained in the scope
          format: int64
        modificationDate:
          type: string
          description: Modification date and time
          format: date-time
    TxIdResponse:
      required:
        - txId
      type: object
      properties:
        txId:
          type: string
          description: Unique identifier of the blockchain transaction that has been performed
    IssueTokenRequest:
      required:
        - fromAddress
        - quantity
        - toAddress
        - tokenName
      type: object
      properties:
        fromAddress:
          type: string
          description: Address used to issue the asset. It must have been granted the 'issue' permission beforehand.
        toAddress:
          type: string
          description: Address receiving the issued units of the asset. It must have been granted the 'receive' permission beforehand.
        tokenName:
          type: string
          description: Name of the token to be issued
        quantity:
          type: integer
          description: Number of units of the asset to issue
          format: int64
        txLabel:
          type: string
          description: Optional label to associate with the issuing transaction
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata to associate with the token issuance
          description: Optional metadata to associate with the token issuance
    EstablishmentAddress:
      required:
        - address
        - address1
        - city
        - country
        - postalCode
      type: object
      properties:
        address1:
          type: string
        address2:
          type: string
        postalCode:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        address:
          type: array
          items:
            type: string
    EstablishmentDayHours:
      required:
        - closeAt
        - openAt
      type: object
      properties:
        openAt:
          $ref: '#/components/schemas/LocalTime'
        closeAt:
          $ref: '#/components/schemas/LocalTime'
    EstablishmentOpeningHours:
      required:
        - day
        - dayHours
      type: object
      properties:
        day:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
        dayHours:
          type: array
          items:
            $ref: '#/components/schemas/EstablishmentDayHours'
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    UpdateEstablishmentRequest:
      required:
        - address
        - category
        - name
        - openingHours
      type: object
      properties:
        name:
          type: string
          description: Establishment name
        address:
          $ref: '#/components/schemas/EstablishmentAddress'
        latitude:
          type: number
          description: Establishment latitude
        longitude:
          type: number
          description: Establishment longitude
        category:
          type: string
          description: Establishment category
        website:
          type: string
          description: Establishment web site
        openingHours:
          type: array
          description: Open hours of the establishment
          items:
            $ref: '#/components/schemas/EstablishmentOpeningHours'
        phoneNumber:
          type: string
          description: Establishment phone number
        detail:
          type: string
          description: Detail about the establishment
    BillDetail:
      required:
        - assetName
        - quantity
        - ref
        - status
        - supplierWalletAddress
      type: object
      properties:
        ref:
          type: string
        requestDate:
          type: string
          format: date-time
        supplierWalletAddress:
          type: string
        customerWalletAddress:
          type: string
        customerName:
          type: string
        assetName:
          type: string
        quantity:
          type: number
        externalRef:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - PAID
            - CANCELLED
        paymentTxId:
          type: string
        amountFiat:
          type: number
        currencyFiat:
          type: string
    BillDetailPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageBillDetail'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BillDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageBillDetail:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BillDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    BillSearchBean:
      type: object
      properties:
        ref:
          type: string
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        supplierWalletAddress:
          type: string
        customerWalletAddress:
          type: string
        assetName:
          type: string
        externalRef:
          type: string
        statuses:
          type: array
          items:
            type: string
            enum:
              - PENDING
              - PAID
              - CANCELLED
        paymentTxId:
          type: string
        customerUserId:
          type: string
        minAmount:
          type: number
        maxAmount:
          type: number
        originUser:
          type: string
    EndUserDetailResponse:
      required:
        - kycLevel
        - user
        - wallets
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDetailResponse'
        wallets:
          type: array
          description: End user wallets
          items:
            $ref: '#/components/schemas/WalletShortResponse'
        kycLevel:
          type: integer
          description: End user kyc level
          format: int32
        kycUpdate:
          type: string
          description: Last kyc level update
          format: date-time
        additionalProperties:
          type: object
          additionalProperties:
            type: string
            description: End user additional properties
          description: End user additional properties
    IssuerCashOutRequest:
      type: object
      properties:
        assets:
          type: array
          description: "List of assets to reconciliate. If empty, all assets will be reconciliated."
          items:
            type: string
            description: "List of assets to reconciliate. If empty, all assets will be reconciliated."
        cashoutWalletAddress:
          type: string
          description: Cash out wallet on which assets will be sent
    UserPreferencesUpdateRequest:
      required:
        - preferences
      type: object
      properties:
        preferences:
          type: object
          additionalProperties:
            type: string
    CashOutRequest:
      required:
        - assetName
        - quantity
        - walletAddress
      type: object
      properties:
        walletAddress:
          type: string
          description: Wallet address for which the cash-out process is launched
        assetName:
          type: string
          description: Asset name for which the cash-out process is launched
        quantity:
          type: number
          description: Quantity of asset to launch the cash-out process
        tokens:
          type: object
          additionalProperties:
            type: integer
            description: Optional token selection when chasing out NFT asset
            format: int64
          description: Optional token selection when chasing out NFT asset
    CashOutFileDetail:
      required:
        - assets
        - creationDate
        - fileLink
        - fileName
        - originUser
        - transactionCount
      type: object
      properties:
        fileName:
          type: string
        assets:
          type: array
          items:
            type: string
        originUser:
          type: string
        fileLink:
          type: string
        creationDate:
          type: string
          format: date-time
        transactionCount:
          type: integer
          format: int64
    CashOutFileDetailPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageCashOutFileDetail'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CashOutFileDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageCashOutFileDetail:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CashOutFileDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    CashOutFileSearchBean:
      type: object
      properties:
        fileName:
          type: string
        originUser:
          type: string
        assets:
          type: array
          items:
            type: string
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
    BillStatusResponse:
      required:
        - ref
        - status
      type: object
      properties:
        ref:
          type: string
          description: Unique reference of the created bill
        status:
          type: string
          description: Status of the bill
          enum:
            - PENDING
            - PAID
            - CANCELLED
        txId:
          type: string
          description: "When the bill is payed, transaction id of the payment"
    PayBillRequest:
      required:
        - token
        - wallet
      type: object
      properties:
        wallet:
          type: string
          description: Wallet address to use for the payment
        token:
          type: string
          description: Access token to confirm bill access
        txLabel:
          type: string
          description: Optional label to be associated with the payment transaction
    UnregisterRequest:
      required:
        - ignoreWalletBalance
      type: object
      properties:
        ignoreWalletBalance:
          type: boolean
          description: Flag allowing to disable the wallet balance check before unregistering the user. False if omitted
    TransactionDetailResponse:
      required:
        - assetName
        - childTransactions
        - date
        - quantity
        - receiverAddress
        - receiverName
        - senderAddress
        - senderName
        - txId
      type: object
      properties:
        txId:
          type: string
        date:
          type: string
          format: date-time
        senderAddress:
          type: string
        senderName:
          type: string
        receiverAddress:
          type: string
        receiverName:
          type: string
        assetName:
          type: string
        quantity:
          type: number
        label:
          type: string
        comment:
          type: string
        type:
          type: string
        amountFiat:
          type: number
        currencyFiat:
          type: string
        parentTransaction:
          type: string
        childTransactions:
          type: array
          items:
            type: string
    OpenCreditDetail:
      required:
        - assetName
        - quantity
        - ref
        - status
        - supplierWalletAddress
      type: object
      properties:
        ref:
          type: string
        requestDate:
          type: string
          format: date-time
        supplierWalletAddress:
          type: string
        customerWalletAddress:
          type: string
        customerName:
          type: string
        assetName:
          type: string
        quantity:
          type: number
        externalRef:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - CLAIMED
            - CANCELLED
        claimedTxId:
          type: string
        originUser:
          type: string
    OpenCreditDetailPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageOpenCreditDetail'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OpenCreditDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageOpenCreditDetail:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OpenCreditDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    OpenCreditSearchBean:
      type: object
      properties:
        ref:
          type: string
        dateFrom:
          type: string
          format: date
          writeOnly: true
        dateTo:
          type: string
          format: date
          writeOnly: true
        supplierWalletAddress:
          type: string
          writeOnly: true
        customerWalletAddress:
          type: string
          writeOnly: true
        assetName:
          type: string
          writeOnly: true
        statuses:
          type: array
          writeOnly: true
          items:
            type: string
            enum:
              - PENDING
              - CLAIMED
              - CANCELLED
        claimedTxId:
          type: string
          writeOnly: true
        customerUserId:
          type: string
          writeOnly: true
        minAmount:
          type: number
          writeOnly: true
        maxAmount:
          type: number
          writeOnly: true
        originUser:
          type: string
          writeOnly: true
    CreateOrgUserResponse:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          description: Technical Id of the created user
    BillDetailResponse:
      required:
        - amount
        - asset
        - ref
        - status
        - supplier
      type: object
      properties:
        ref:
          type: string
          description: Unique reference of the created bill
        externalRef:
          type: string
          description: Optional reference of this bill in an external system
        supplier:
          type: string
          description: Wallet address that created the bill
        asset:
          type: string
          description: Name of the asset requested in the payment
        amount:
          type: number
          description: Amount requested in the payment
        status:
          type: string
          description: Status of the bill
          enum:
            - PENDING
            - PAID
            - CANCELLED
        customer:
          type: string
          description: Wallet address that payed the bill
        paymentTxId:
          type: string
          description: Transaction id of the bill payment
        initData:
          type: object
          description: Optional metadata associated with the bill at creation
        resultData:
          type: object
          description: Optional metadata associated with the bill cancellation
    EndUserCounts:
      required:
        - activated
        - created
        - deleted
        - total
      type: object
      properties:
        created:
          type: integer
          format: int64
        activated:
          type: integer
          format: int64
        deleted:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
      description: "Total count of end users and split by status (created, activated or deleted)"
    EndUserEvents:
      required:
        - activation
        - creation
        - deletion
      type: object
      properties:
        creation:
          type: integer
          format: int64
        activation:
          type: integer
          format: int64
        deletion:
          type: integer
          format: int64
      description: "Number of end user account creation, activation and deletion in the 24h preceding the last 24h"
    EndUserStatsResponse:
      required:
        - last24h
        - previous24h
        - total
      type: object
      properties:
        total:
          $ref: '#/components/schemas/EndUserCounts'
        last24h:
          $ref: '#/components/schemas/EndUserEvents'
        previous24h:
          $ref: '#/components/schemas/EndUserEvents'
    OrganizationShortResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageOrganizationShortResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationShortResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageOrganizationShortResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationShortResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    OrganizationSearchBean:
      type: object
      properties:
        name:
          type: string
        externalRef:
          type: string
        creationDateFrom:
          type: string
          format: date
        creationDateTo:
          type: string
          format: date
        typeNotIn:
          type: array
          items:
            type: string
        typeIn:
          type: array
          items:
            type: string
        scopeIn:
          type: array
          items:
            type: string
    EstablishmentDetailResponse:
      required:
        - address
        - id
        - name
        - orgRef
        - tags
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        orgRef:
          type: string
        address:
          $ref: '#/components/schemas/EstablishmentAddress'
        tags:
          type: array
          items:
            type: string
        latitude:
          type: number
        longitude:
          type: number
        website:
          type: string
        distance:
          type: number
        phoneNumber:
          type: string
        detail:
          type: string
    EstablishmentDetailResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageEstablishmentDetailResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/EstablishmentDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageEstablishmentDetailResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/EstablishmentDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    ResetPasswordRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
          description: Email of the user
        channel:
          type: string
          description: Specify if the user should receive an email
          enum:
            - SMS
            - EMAIL
    UnspentData:
      required:
        - amount
        - index
        - tx
      type: object
      properties:
        tx:
          type: string
        index:
          type: integer
          format: int32
        amount:
          type: number
        data:
          type: object
          additionalProperties:
            type: object
        tokens:
          type: object
          additionalProperties:
            type: integer
            format: int64
    UnspentListResponse:
      required:
        - unspentList
      type: object
      properties:
        unspentList:
          type: array
          items:
            $ref: '#/components/schemas/UnspentData'
    AuditSearchBean:
      type: object
      properties:
        originUser:
          type: string
        event:
          type: array
          items:
            type: string
        creationDateFrom:
          type: string
          format: date
        creationDateTo:
          type: string
          format: date
        objectIdentifier:
          type: string
        objectType:
          type: string
        objectTypeNotIn:
          type: string
    WalletAssetsResponse:
      required:
        - assets
      type: object
      properties:
        assets:
          uniqueItems: true
          type: array
          items:
            type: string
    PaymentStatusResponse:
      required:
        - ref
        - status
      type: object
      properties:
        ref:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
            - REFUNDED
        txId:
          type: string
    CheckPasswordCodeRequest:
      required:
        - email
        - otp
      type: object
      properties:
        email:
          type: string
        otp:
          type: string
    NewsCardListResponse:
      required:
        - cards
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/NewsCardResponse'
    IssuerCashOutScheduleRequest:
      required:
        - assetNames
        - cashOutStartDate
        - periodicity
      type: object
      properties:
        walletAddress:
          type: string
          description: Wallet address for which the cash-out process is launched
        assetNames:
          type: array
          description: Asset names for which the cash-out process is launched
          items:
            type: string
            description: Asset names for which the cash-out process is launched
        periodicity:
          type: string
          description: Scheduling period
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
        cashOutStartDate:
          type: string
          description: Start date of cas-out
          format: date
    IssuerCashOutScheduleDetail:
      required:
        - assetNames
        - id
        - periodicity
        - startDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        cashOutWallet:
          type: string
        assetNames:
          type: array
          items:
            type: string
        periodicity:
          type: string
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
        dayOfWeek:
          type: string
          enum:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
        dayOfMonth:
          type: integer
          format: int32
        startDate:
          type: string
          format: date
    KycUpdateRequest:
      required:
        - kycLevel
      type: object
      properties:
        kycLevel:
          type: integer
          description: New KYC level for the enduser
          format: int32
    OrganizationStatsResponse:
      required:
        - total
        - types
      type: object
      properties:
        total:
          type: integer
          description: Total count of organizations
          format: int64
        types:
          type: object
          additionalProperties:
            type: integer
            description: Organization count for each type. Organizations without type are ignored
            format: int64
          description: Organization count for each type. Organizations without type are ignored
    WalletBalanceResponse:
      required:
        - balances
      type: object
      properties:
        balances:
          type: object
          additionalProperties:
            type: number
            description: Associative array of asset names and their respective balances
          description: Associative array of asset names and their respective balances
          example:
            asset: 100
            otherAsset: 200
    AssetDetailResponse:
      required:
        - autoSelectTokens
        - burnOnCashOut
        - code
        - date
        - fungible
        - hasLogo
        - issuer
        - name
        - open
        - units
      type: object
      properties:
        name:
          type: string
          description: Asset name
        issuer:
          type: string
          description: Address used to issue the asset
        open:
          type: boolean
          description: "If true, more units of the same asset can be issued later. If false, the quantity of units of the asset issued during this request is final."
        units:
          type: number
          description: Smallest transactable unit of the asset
          example: 0.01
        fungible:
          type: boolean
          description: Describe if the asset is fungible or non fungible
        autoSelectTokens:
          type: boolean
          description: "For non fungible asset, describe if token selection is automatic or not"
        date:
          type: string
          description: Creation date
          format: date-time
        code:
          type: string
          description: Asset code
        label:
          type: string
          description: Asset label
        hasLogo:
          type: boolean
          description: Has asset logo
        maxAllowedBalance:
          type: number
          description: Asset max amount in end-user wallets
        hasExpiration:
          type: boolean
          description: Has an expiration period
        expirationPeriod:
          type: integer
          description: Expiration period of the asset in number of days
          format: int32
        hasTxLimit:
          type: boolean
          description: Has a transaction limit
        txCount:
          type: integer
          description: Max transaction number for which the asset must be spent
          format: int32
        burnOnCashOut:
          type: boolean
          description: Burn automatic on cash-out
        assetColor:
          type: string
          description: Asset color
    AssetListResponse:
      required:
        - assets
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetDetailResponse'
    KycRuleRequest:
      required:
        - alert
        - assetName
        - blockingChoice
        - level
        - threshold
        - type
      type: object
      properties:
        level:
          type: integer
          description: Kyc level
          format: int32
        threshold:
          type: integer
          description: Kyc threshold
          format: int32
        assetName:
          type: string
          description: Asset concerned by the Kyc rule
        currency:
          type: string
          description: Currency defined in Kyc rule
        txTypes:
          type: array
          description: Transaction types concerned by the Kyc rule
          items:
            type: string
            description: Transaction types concerned by the Kyc rule
        type:
          type: string
          description: Kyc rule type
          enum:
            - SEND
            - RECEIVE
            - BALANCE
        period:
          type: integer
          description: Number of consecutive days used to calculate the transferred assets quantity
          format: int32
        blockingChoice:
          type: string
          description: Option indicating the blocking level of the KYC
          enum:
            - BLOCK
            - ADMIN
            - PASS
        alert:
          type: boolean
          description: Flag indicating if the rule should trigger an alert email
        basis:
          type: string
          description: Flag indicating if the rule should be sliding and calendar year
          enum:
            - UNITARY
            - YEARLY
            - ROLLING
    AssetWhitelist:
      required:
        - isInWhitelist
        - name
      type: object
      properties:
        name:
          type: string
        isInWhitelist:
          type: boolean
    AssetWhitelistResponse:
      required:
        - assets
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetWhitelist'
    TransactionResponse:
      required:
        - txId
      type: object
      properties:
        txId:
          type: string
          description: Unique identifier of the blockchain transaction that has been performed
    RealPurchaseRequest:
      required:
        - asset
        - currency
        - language
        - quantity
        - toAddress
      type: object
      properties:
        toAddress:
          type: string
          description: Address receiving the units of the asset.
        asset:
          type: string
          description: Asset name
        quantity:
          type: number
          description: Number of units of the asset to purchase
        currency:
          type: string
          description: Currency of the payment
        language:
          type: string
          description: Language of the payment page
        tokens:
          type: object
          additionalProperties:
            type: integer
            description: Optional token selection for a purchase of a NFT asset
            format: int64
          description: Optional token selection for a purchase of a NFT asset
    EndUserSearchBean:
      type: object
      properties:
        login:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        friendlyName:
          type: string
        alias:
          type: string
        email:
          type: string
        phoneNumberIn:
          type: array
          items:
            type: string
        phoneNumberLike:
          type: string
        createdFrom:
          type: string
          format: date
        createdTo:
          type: string
          format: date
        walletAddress:
          type: string
        status:
          type: array
          items:
            type: string
            enum:
              - CREATED
              - ACTIVATED
              - DEACTIVATED
              - DELETED
        profileIn:
          type: array
          items:
            type: string
        kycLevel:
          type: array
          items:
            type: integer
            format: int32
        scopes:
          type: array
          items:
            type: string
        isEnabled:
          type: boolean
    WalletAssetStats:
      required:
        - asset
        - burnt
        - issued
        - received
        - sent
      type: object
      properties:
        asset:
          type: string
        issued:
          $ref: '#/components/schemas/WalletStatData'
        burnt:
          $ref: '#/components/schemas/WalletStatData'
        sent:
          $ref: '#/components/schemas/WalletInOutStatData'
        received:
          $ref: '#/components/schemas/WalletInOutStatData'
    WalletInOutStatData:
      required:
        - quantity
        - txCount
      type: object
      properties:
        quantity:
          $ref: '#/components/schemas/WalletStatData'
        txCount:
          $ref: '#/components/schemas/WalletStatData'
    WalletStatData:
      required:
        - last24h
        - previous24h
        - total
      type: object
      properties:
        total:
          type: number
        last24h:
          type: number
        previous24h:
          type: number
    WalletStatsResponse:
      required:
        - address
        - stats
      type: object
      properties:
        address:
          type: string
        stats:
          type: array
          items:
            $ref: '#/components/schemas/WalletAssetStats'
    ProfileResponse:
      required:
        - id
        - name
        - path
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        path:
          type: string
    ProfilesResponse:
      required:
        - profiles
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/ProfileResponse'
    CreateGroupRequest:
      required:
        - organizationRefs
      type: object
      properties:
        organizationRefs:
          type: array
          items:
            type: string
        name:
          type: string
    AuditRecordPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageAuditResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AuditResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    AuditResponse:
      required:
        - creationDate
        - event
        - id
        - objectIdentifier
        - objectType
        - originUser
        - userName
      type: object
      properties:
        id:
          type: integer
          format: int64
        creationDate:
          type: string
          format: date-time
        originUser:
          type: string
        userName:
          type: string
        objectType:
          type: string
        objectIdentifier:
          type: string
        event:
          type: string
        ipAddress:
          type: string
        diff:
          type: string
        label:
          type: string
        queryParameter:
          type: string
    PageAuditResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AuditResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    SmsDetail:
      required:
        - creationDate
        - phoneNumber
        - status
        - type
      type: object
      properties:
        creationDate:
          type: string
          description: Sms sending date and time
          format: date-time
        status:
          type: string
          description: Sms sending status
          enum:
            - DELIVERED
            - OPERATOR_ERROR
            - BEING_SENT
            - CLIENT_ERROR
            - BLACKLISTED
            - UNKNOWN_CLIENT
            - NO_FINAL_STATUS_RECEIVED
            - INTEGRATION_REJECT
            - PORTABILITY_IN_PROGRESS
            - INVALID_ADDRESS
            - OTHER_ERROR
        phoneNumber:
          type: string
          description: Phone number which received the sms
        type:
          type: string
          description: Sms type
          enum:
            - REGISTRATION
            - PASSWORD_RESET
            - DEVICE_VALIDATION
    SmsHistoryResponse:
      required:
        - smsList
      type: object
      properties:
        smsList:
          type: array
          items:
            $ref: '#/components/schemas/SmsDetail'
    SponsoredEndUserResponse:
      required:
        - sponsored
      type: object
      properties:
        sponsored:
          type: array
          items:
            type: string
    ValidateDeviceCredentialRequest:
      required:
        - deviceUid
        - otp
      type: object
      properties:
        deviceUid:
          type: string
        otp:
          type: string
    PurchaseRequest:
      required:
        - asset
        - quantity
        - toAddress
      type: object
      properties:
        toAddress:
          type: string
          description: Address receiving the units of the asset.
        asset:
          type: string
          description: Asset name
        quantity:
          type: number
          description: Number of units of the asset to purchase
        tokens:
          type: object
          additionalProperties:
            type: integer
            description: Optional token selection for a purchase of a NFT asset
            format: int64
          description: Optional token selection for a purchase of a NFT asset
    RegisterDeviceRequest:
      required:
        - appVersion
        - brand
        - data
        - fingerprint
        - manufacturer
        - os
        - osVersion
        - uid
      type: object
      properties:
        UID:
          type: string
          description: Unique identifier for the device generated at app installation
          writeOnly: true
        os:
          type: string
          description: Device operating system (iOS or Android)
          enum:
            - iOS
            - Android
        osVersion:
          type: string
          description: Operating system version
        appVersion:
          type: string
          description: App version
        buildVersion:
          type: string
          description: Operating system build version
        brand:
          type: string
          description: Device brand
        manufacturer:
          type: string
          description: Device manufacturer
        model:
          type: string
          description: Device model
        fingerprint:
          type: boolean
          description: Device fingerprint support
        data:
          type: object
          additionalProperties:
            type: object
            description: Additional data describing the device
          description: Additional data describing the device
        notificationToken:
          type: string
          description: Notification token
        receiveNotification:
          type: boolean
          description: Receive notification
        appName:
          type: string
          description: App name
        uid:
          type: string
    CodeSponsorshipValidResponse:
      required:
        - isValid
      type: object
      properties:
        isValid:
          type: boolean
    BusinessSponsorshipResponse:
      required:
        - id
        - isDefault
        - issuerWallet
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        beneficiaryAsset:
          $ref: '#/components/schemas/AssetDetail'
        beneficiaryReward:
          type: number
        maxSponsoring:
          type: number
        numberBeneficiary:
          type: number
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isDefault:
          type: boolean
        issuerWallet:
          type: string
    BusinessSponsorshipRequest:
      required:
        - beneficiaryAsset
        - beneficiaryReward
        - isDefault
        - issuerWallet
        - title
      type: object
      properties:
        title:
          type: string
        beneficiaryAsset:
          type: string
        beneficiaryReward:
          type: number
        maxSponsoring:
          type: number
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        isDefault:
          type: boolean
        issuerWallet:
          type: string
    OrderCompleteRequest:
      type: object
      properties:
        mode:
          type: string
          description: |-
            Order completion mode. Default mode from app configuration is used if omitted.
            SEND : send existing quantity of asset (balance must be sufficient)
            ISSUE : issue new quantity of asset (asset must be open)
            SMART : send if balance is sufficient, or fallback to issue (asset must be open)
          enum:
            - SEND
            - ISSUE
            - SMART
        label:
          type: string
          description: Optional label for the transaction resulting from order completion
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata to associate with the order completion
          description: Optional metadata to associate with the order completion
    CustomerSponsorshipSearchBean:
      type: object
      properties:
        assetBeneficiary:
          type: string
        assetInitiator:
          type: string
        date:
          type: string
          format: date
        graceDate:
          type: string
          format: date
        isDefault:
          type: boolean
        issuerWallet:
          type: string
    EndUserSearchResponse:
      required:
        - creationDate
        - email
        - firstName
        - kycLevel
        - lastName
        - login
        - status
        - userId
        - wallets
      type: object
      properties:
        userId:
          type: string
          description: User ID
        login:
          type: string
          description: Login of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        alias:
          type: string
          description: Alias of the user
        email:
          type: string
          description: "Email address of the user, also used as user login"
        phoneNumber:
          type: string
          description: Phone number of the user (optional)
        creationDate:
          type: string
          description: Creation date of the user
          format: date-time
        status:
          type: string
          description: Status of the enduser
          enum:
            - CREATED
            - ACTIVATED
            - DEACTIVATED
            - DELETED
        wallets:
          type: array
          description: End user wallets
          items:
            type: string
            description: End user wallets
        lastLogin:
          type: string
          description: End user last login date
          format: date-time
        kycLevel:
          type: integer
          description: End user kyc level
          format: int32
        kycUpdate:
          type: string
          description: Last kyc level update
          format: date-time
        profile:
          type: string
          description: Profile name of the user
    EndUserSearchResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageEndUserSearchResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/EndUserSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageEndUserSearchResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/EndUserSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PurchaseTokenOrderSearchBean:
      type: object
      properties:
        ref:
          type: string
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        customerWalletAddress:
          type: string
        assetName:
          type: string
        transactionStatuses:
          type: array
          items:
            type: string
            enum:
              - CREATED
              - CANCELLED
              - PENDING
              - REFUSED
              - COMPLETED
        bcTxId:
          type: string
        minAmount:
          type: number
        maxAmount:
          type: number
        customerUserId:
          type: string
    CreateOrgUserRequest:
      required:
        - email
        - firstName
        - lastName
        - profilePath
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: "Email address of the user, also used as user login"
        phoneNumber:
          type: string
          description: Phone number of the user (optional)
        profilePath:
          type: string
          description: Profile path of the user
        scope:
          type: string
          description: Scope to attribute to the user
    OrderRequest:
      required:
        - asset
        - from
        - quantity
        - to
      type: object
      properties:
        from:
          type: string
          description: Wallet address passing the order
        to:
          type: string
          description: Wallet address that should serve the order
        asset:
          type: string
          description: Asset ordered
        quantity:
          type: number
          description: Asset quantity ordered
        metadata:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata to associate with the order creation
          description: Optional metadata to associate with the order creation
        tokens:
          type: object
          additionalProperties:
            type: integer
            description: Optional token selection for an order of a NFT asset
            format: int64
          description: Optional token selection for an order of a NFT asset
        currencyFiat:
          type: string
          description: Optional currency associated with this order
    ImportTokenRequest:
      required:
        - fromAddress
      type: object
      properties:
        fromAddress:
          type: string
          description: Address used to issue the tokens. It must have the permission to issue the tokens on the selected asset
    WalletCloseRequest:
      required:
        - adminAddress
      type: object
      properties:
        adminAddress:
          type: string
          description: Blockchain address used to close the wallet. This address must have been granted the 'admin' permission beforehand.
    NewsCardRequest:
      required:
        - backgroundColorCode
        - text
        - textColorCode
      type: object
      properties:
        text:
          type: object
          additionalProperties:
            type: string
        textColorCode:
          type: string
        backgroundColorCode:
          type: string
        scopes:
          type: array
          items:
            type: string
        androidUrl:
          type: string
        iosUrl:
          type: string
    BusinessSponsorshipRecordPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageBusinessSponsorshipResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BusinessSponsorshipResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageBusinessSponsorshipResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BusinessSponsorshipResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    BusinessSponsorshipSearchBean:
      type: object
      properties:
        beneficiaryAsset:
          type: string
        date:
          type: string
          format: date-time
        isDefault:
          type: boolean
        issuerWallet:
          type: string
    ResendDeviceCredentialCodeRequest:
      required:
        - deviceUid
      type: object
      properties:
        deviceUid:
          type: string
    SmsProperties:
      type: object
      properties:
        operator:
          type: string
        smsGroupSize:
          type: string
        messageId:
          type: string
        reason:
          type: string
    UpdateNotificationRequest:
      required:
        - date
        - err_code
        - id
        - phase
        - status
      type: object
      properties:
        id:
          type: string
        ext_id:
          type: string
        date:
          type: string
          format: date-time
        phase:
          type: integer
          format: int64
        err_code:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - DELIVERED
            - OPERATOR_ERROR
            - BEING_SENT
            - CLIENT_ERROR
            - BLACKLISTED
            - UNKNOWN_CLIENT
            - NO_FINAL_STATUS_RECEIVED
            - INTEGRATION_REJECT
            - PORTABILITY_IN_PROGRESS
            - INVALID_ADDRESS
            - OTHER_ERROR
        props:
          $ref: '#/components/schemas/SmsProperties'
    SaveDeviceCredentialRequest:
      required:
        - deviceUid
        - pubKey
      type: object
      properties:
        deviceUid:
          type: string
        pubKey:
          type: string
    LoyaltyProgramResponse:
      required:
        - id
        - name
        - percentage
        - rewardAsset
        - triggerAssets
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        rewardAsset:
          type: string
        triggerAssets:
          type: array
          items:
            type: string
        percentage:
          type: number
        maxAmount:
          type: number
        startingDate:
          type: string
          format: date-time
        endingDate:
          type: string
          format: date-time
    TransactionRequest:
      required:
        - asset
        - fromAddress
        - quantity
        - toAddress
      type: object
      properties:
        fromAddress:
          type: string
          description: Address sending the units of the asset. It must have been granted the 'send' permission beforehand.
        toAddress:
          type: string
          description: Address receiving the units of the asset. It must have been granted the 'receive' permission beforehand.
        asset:
          type: string
          description: Asset name
        quantity:
          type: number
          description: Number of units of the asset to send
        label:
          type: string
          description: Optional label associated with the transaction
        comment:
          type: string
          description: Optional comment associated with the transaction
        type:
          type: string
          description: Optional type associated with the transaction
        expirationDate:
          type: string
          description: Optional expiration date for the credited asset
          format: date-time
        txCount:
          type: integer
          description: Optional max transaction number for which the asset must be spent
          format: int32
        tokens:
          type: object
          additionalProperties:
            type: integer
            description: Optional token selection for a transaction with a NFT asset
            format: int64
          description: Optional token selection for a transaction with a NFT asset
    IssueMoreRequest:
      required:
        - fromAddress
        - quantity
        - toAddress
      type: object
      properties:
        fromAddress:
          type: string
          description: Address used to issue the asset. It must have been granted the 'issue' permission beforehand.
        toAddress:
          type: string
          description: Address receiving the issued units of the asset. It must have been granted the 'receive' permission beforehand.
        quantity:
          type: number
          description: Number of units of the asset to issue
        txLabel:
          type: string
          description: Optional label to associate with the issuing transaction
    ImportWithScopeRequest:
      required:
        - scopeRef
      type: object
      properties:
        scopeRef:
          type: string
          description: Id of the scope to which we will add the users or organizations
    DeactivationRequest:
      type: object
      properties:
        reason:
          type: string
    UserImportSessionValidateResponse:
      required:
        - importValidationSessionId
      type: object
      properties:
        importValidationSessionId:
          type: integer
          description: Id of the validation import session
          format: int64
    UserShortResponse:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the user
    EndUserRegisterRequest:
      required:
        - alias
        - email
        - firstName
        - lastName
        - otpChannel
        - password
        - phoneNumber
      type: object
      properties:
        firstName:
          type: string
          description: First name of the end user
        lastName:
          type: string
          description: Last name of the end user
        alias:
          type: string
          description: Alias of the end user
        phoneNumber:
          type: string
          description: Phone number of the end user
        email:
          type: string
          description: Email of the end user
        password:
          type: string
          description: Password of the end user
        otpChannel:
          type: string
          description: SMS/EMAIL where send the OTP code
          enum:
            - SMS
            - EMAIL
        deviceUid:
          type: string
          description: Uid of device
        pubKey:
          type: string
          description: PubKey of device
        sponsorshipCode:
          type: string
          description: sponsoring code
    CustomerRegisterResponse:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the customer
    CustomerActivateRequest:
      required:
        - otp
      type: object
      properties:
        otp:
          type: string
        deviceUid:
          type: string
    GroupListResponse:
      required:
        - groups
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupResponse'
    WalletSearchBean:
      type: object
      properties:
        name:
          type: string
        creationAfter:
          type: string
          format: date
        creationBefore:
          type: string
          format: date
        address:
          type: string
        org:
          type: string
        user:
          type: string
        type:
          type: string
          enum:
            - USER
            - ORGANIZATION
    PageTransactionDetailResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    TransactionDetailResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageTransactionDetailResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    CashOutScheduleRequest:
      required:
        - assetName
        - cashOutStartDate
        - periodicity
        - walletAddress
      type: object
      properties:
        walletAddress:
          type: string
          description: Wallet address for which the cash-out process is launched
        assetName:
          type: string
          description: Asset name for which the cash-out process is launched
        periodicity:
          type: string
          description: Scheduling period
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
        cashOutStartDate:
          type: string
          description: Start date of cash-out
          format: date
        dayOfWeek:
          type: integer
          description: Cash-out schedule day of week
          format: int32
        dayOfMonth:
          type: integer
          description: Cash-out schedule day of month
          format: int32
    OpenCreditStatusResponse:
      required:
        - ref
        - status
      type: object
      properties:
        ref:
          type: string
          description: Unique reference of the created openCredit
        status:
          type: string
          description: Status of the openCredit
          enum:
            - PENDING
            - CLAIMED
            - CANCELLED
        txId:
          type: string
          description: "When the openCredit is payed, transaction id of the payment"
    ClaimOpenCreditRequest:
      required:
        - token
        - wallet
      type: object
      properties:
        wallet:
          type: string
          description: Wallet address to use for the payment
        token:
          type: string
          description: Access token to confirm openCredit access
        txLabel:
          type: string
          description: Optional label to be associated with the payment transaction
    ResellRequest:
      required:
        - asset
        - fromAddress
        - quantity
      type: object
      properties:
        fromAddress:
          type: string
          description: Address receiving the units of the asset.
        asset:
          type: string
          description: Asset name
        quantity:
          type: number
          description: Number of units of the asset to resell
    TxImportValidateSessionResponse:
      required:
        - importValidationSessionId
      type: object
      properties:
        importValidationSessionId:
          type: integer
          description: Id of the validation import session
          format: int64
    OrganizationDetailResponse:
      required:
        - creationDate
        - groups
        - name
        - organizationRef
        - scopes
        - wallets
      type: object
      properties:
        organizationRef:
          type: string
          description: Unique reference of the organization
        name:
          type: string
          description: Name of the organization
        externalRef:
          type: string
          description: "External reference of the organization, optional"
        creationDate:
          type: string
          description: Creation date of the organization
          format: date-time
        groups:
          type: array
          description: Groups containing this organizations
          items:
            type: string
            description: Groups containing this organizations
        wallets:
          type: array
          description: Wallets of the organization
          items:
            $ref: '#/components/schemas/WalletShortResponse'
        type:
          type: string
          description: Organization type
        website:
          type: string
          description: Organization website
        scopes:
          type: array
          description: Scopes where the organization belongs to
          items:
            type: string
            description: Scopes where the organization belongs to
    EndUserContactRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
          description: Email of the end user
    AssetDateStatus:
      required:
        - date
        - stats
      type: object
      properties:
        date:
          type: string
          format: date-time
        stats:
          $ref: '#/components/schemas/AssetStatsData'
    AssetStatsData:
      required:
        - burnt
        - exchanged
        - issued
        - transactions
      type: object
      properties:
        issued:
          type: number
        burnt:
          type: number
        exchanged:
          type: number
        transactions:
          type: integer
          format: int64
    AssetStatsHistogramResponse:
      required:
        - name
        - statsHistogram
      type: object
      properties:
        name:
          type: string
        statsHistogram:
          type: array
          items:
            $ref: '#/components/schemas/AssetDateStatus'
    BalanceDetail:
      required:
        - amount
        - assetName
        - locked
      type: object
      properties:
        assetName:
          type: string
          description: Name of the asset
        amount:
          type: number
          description: Balance of the asset
        locked:
          type: number
          description: Amount of locked asset for cashOut
      description: Associative array of asset names and their respective balances
      example: |-
        {
          "assetName": asset,
          "amount": 200
          "locked": 8
        }
    EndUserShortResponse:
      required:
        - firstName
        - lastName
        - userId
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
      description: "User owning the wallet, mutually exclusive with org"
    WalletDetailResponse:
      required:
        - address
        - balances
        - creationDate
        - permissions
        - pubKey
        - status
        - type
      type: object
      properties:
        name:
          type: string
          description: "Descriptive name of the wallet, optional"
        address:
          type: string
          description: Blockchain address of the wallet
        pubKey:
          type: string
          description: Public key associated with the blockchain address of the wallet
        creationDate:
          type: string
          description: Date of creation of the wallet
          format: date-time
        type:
          type: string
          description: Type of the wallet (owned by user or organization)
          enum:
            - USER
            - ORGANIZATION
        org:
          $ref: '#/components/schemas/OrganizationShortResponse'
        user:
          $ref: '#/components/schemas/EndUserShortResponse'
        permissions:
          type: array
          description: Blockchain permissions of the wallet
          items:
            type: string
            description: Blockchain permissions of the wallet
        balances:
          type: array
          description: Associative array of asset names and their respective balances
          example: |-
            {
              "assetName": asset,
              "amount": 200
              "locked": 8
            }
          items:
            $ref: '#/components/schemas/BalanceDetail'
        status:
          type: string
          description: Status of the wallet
          enum:
            - ACTIVE
            - CLOSED
    WalletAssetStatsHistogram:
      required:
        - asset
        - burnt
        - issued
        - received
        - sent
      type: object
      properties:
        asset:
          type: string
        issued:
          type: array
          items:
            $ref: '#/components/schemas/WalletDateStatus'
        burnt:
          type: array
          items:
            $ref: '#/components/schemas/WalletDateStatus'
        sent:
          $ref: '#/components/schemas/WalletInOutStatHistogram'
        received:
          $ref: '#/components/schemas/WalletInOutStatHistogram'
    WalletDateStatus:
      required:
        - date
        - value
      type: object
      properties:
        date:
          type: string
          format: date-time
        value:
          type: number
    WalletInOutStatHistogram:
      required:
        - quantity
        - txCount
      type: object
      properties:
        quantity:
          type: array
          items:
            $ref: '#/components/schemas/WalletDateStatus'
        txCount:
          type: array
          items:
            $ref: '#/components/schemas/WalletDateStatus'
    WalletStatsHistogramResponse:
      required:
        - address
        - statsHistogram
      type: object
      properties:
        address:
          type: string
        statsHistogram:
          type: array
          items:
            $ref: '#/components/schemas/WalletAssetStatsHistogram'
    OrganizationAutocompleteResponse:
      required:
        - name
        - organizationRef
      type: object
      properties:
        organizationRef:
          type: string
        name:
          type: string
        type:
          type: string
    OrganizationAutocompleteResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageOrganizationAutocompleteResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationAutocompleteResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageOrganizationAutocompleteResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationAutocompleteResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    OperationSummary:
      type: object
      properties:
        amount:
          type: number
        count:
          type: number
    TransactionSummary:
      required:
        - assetName
        - operations
      type: object
      properties:
        assetName:
          type: string
        operations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OperationSummary'
    CustomerSponsorshipRequest:
      required:
        - beneficiaryAsset
        - beneficiaryReward
        - initiatorAsset
        - initiatorReward
        - isDefault
        - issuerWallet
        - title
      type: object
      properties:
        title:
          type: string
        beneficiaryAsset:
          type: string
        beneficiaryReward:
          type: number
        initiatorAsset:
          type: string
        initiatorReward:
          type: number
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        graceDate:
          type: string
          format: date-time
        isDefault:
          type: boolean
        issuerWallet:
          type: string
    EndUserUpdateRequest:
      required:
        - alias
        - email
        - firstName
        - lastName
        - profileId
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        alias:
          type: string
          description: Alias of the user
        email:
          type: string
          description: Email of the user
        phoneNumber:
          type: string
          description: "Phone number of the user, optional"
        profileId:
          type: string
          description: Profile id of the user
    ImportStatusResponse:
      required:
        - importSessionInProgress
      type: object
      properties:
        importSessionInProgress:
          type: boolean
    ImportedEndUserActivationRequest:
      required:
        - code
        - email
        - password
        - tosAccepted
      type: object
      properties:
        tosAccepted:
          type: boolean
          description: Term of service accepted
        email:
          type: string
          description: Email of the end user
        password:
          type: string
          description: Password of the end user
        code:
          type: string
          description: Code of the end user generated during import
    CreateEstablishmentRequest:
      required:
        - address
        - category
        - name
        - openingHours
        - orgRef
      type: object
      properties:
        name:
          type: string
          description: Establishment name
        orgRef:
          type: string
          description: Org reference for which the establishment is created
        address:
          $ref: '#/components/schemas/EstablishmentAddress'
        latitude:
          type: number
          description: Establishment latitude
        longitude:
          type: number
          description: Establishment longitude
        category:
          type: string
          description: Establishment category
        website:
          type: string
          description: Establishment web site
        openingHours:
          type: array
          description: Open hours of the establishment
          items:
            $ref: '#/components/schemas/EstablishmentOpeningHours'
        phoneNumber:
          type: string
          description: Establishment phone number
        detail:
          type: string
          description: Detail about the establishment
    CancelOpenCreditRequest:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata associated with the open credit cancellation
          description: Optional metadata associated with the open credit cancellation
    UpdateUserRequest:
      required:
        - email
        - firstName
        - lastName
        - profileId
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: "Email address of the user, also used as user login"
        phoneNumber:
          type: string
          description: Phone number of the user (optional)
        org:
          type: string
          description: Organization of the user (mutually exclusive with group)
        group:
          type: string
          description: Organization group of the user (mutually exclusive with org)
        profileId:
          type: string
          description: Profile id of the user
        scopeRef:
          type: string
          description: Reference of the user scope
    UpdateProfileRequest:
      required:
        - alias
      type: object
      properties:
        alias:
          type: string
    AssetPermissionsResponse:
      required:
        - permissions
      type: object
      properties:
        permissions:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/WalletShortResponse'
    PermissionFilter:
      type: object
      properties:
        permissionsIn:
          type: array
          items:
            type: string
    EndUserActivateRequest:
      required:
        - otp
      type: object
      properties:
        otp:
          type: string
        deviceUid:
          type: string
    AssetLogoResponse:
      required:
        - assetName
      type: object
      properties:
        assetName:
          type: string
          description: Name of the asset
        logo:
          type: array
          description: Image of the asset
          items:
            type: string
            description: Image of the asset
            format: byte
    ListLogoResponse:
      required:
        - logos
      type: object
      properties:
        logos:
          type: array
          items:
            $ref: '#/components/schemas/AssetLogoResponse'
    CodeSponsorshipResponse:
      required:
        - code
      type: object
      properties:
        code:
          type: string
    CustomerRegisterRequest:
      required:
        - email
        - firstName
        - lastName
        - password
        - phoneNumber
      type: object
      properties:
        firstName:
          type: string
          description: First name of the customer
        lastName:
          type: string
          description: Last name of the customer
        phoneNumber:
          type: string
          description: Phone number of the customer
        email:
          type: string
          description: Email of the customer
        password:
          type: string
          description: Password of the customer
        deviceUid:
          type: string
          description: Uid of device
        pubKey:
          type: string
          description: PubKey of device
    CategoryListResponse:
      required:
        - categories
      type: object
      properties:
        categories:
          type: array
          description: categories
          items:
            type: string
            description: categories
    RefuseCashoutRequest:
      type: object
      properties:
        reason:
          type: string
          description: reason for refuse
    CreateOrganizationRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the organization
        externalRef:
          type: string
          description: "External reference of the organization, optional"
        groups:
          type: array
          description: "Unique references of the parent organization groups, optional"
          items:
            type: string
            description: "Unique references of the parent organization groups, optional"
        type:
          type: string
          description: Organisation type
        website:
          type: string
          description: Organisation website
        scopes:
          type: array
          description: Organisation scope
          items:
            type: string
            description: Organisation scope
    KycStatusListResponses:
      required:
        - kycStatuses
      type: object
      properties:
        kycStatuses:
          type: array
          description: List of the KYC rules applied to the end user
          items:
            $ref: '#/components/schemas/KycStatusResponse'
    KycStatusResponse:
      required:
        - assetName
        - cumulatedAmount
        - kycRuleType
        - level
        - threshold
      type: object
      properties:
        level:
          type: integer
          description: Level of the KYC rule
          format: int32
        assetName:
          type: string
          description: Asset name of the KYC rule
        threshold:
          type: integer
          description: Threshold of the KYC rule
          format: int32
        currency:
          type: string
          description: "Currency of the KYC rule, optional"
        kycRuleType:
          type: string
          description: Type of the KYC rule
          enum:
            - SEND
            - RECEIVE
            - BALANCE
        txTypes:
          type: array
          description: "Transactions types concerned by the KYC rule, optional"
          items:
            type: string
            description: "Transactions types concerned by the KYC rule, optional"
        cumulatedAmount:
          type: number
          description: Cumulated amount spent by the end user concerning the KYC rule
      description: List of the KYC rules applied to the end user
    PagePurchaseTokenOrderDetail:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseTokenOrderDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PurchaseTokenOrderDetail:
      required:
        - assetName
        - assetQuantity
        - customerName
        - customerWalletAddress
        - ref
        - transactionStatus
      type: object
      properties:
        ref:
          type: string
        requestDate:
          type: string
          format: date-time
        customerWalletAddress:
          type: string
        customerName:
          type: string
        assetName:
          type: string
        assetQuantity:
          type: number
        tokens:
          type: object
          additionalProperties:
            type: integer
            format: int64
        amount:
          type: number
        currency:
          type: string
        transactionStatus:
          type: string
          enum:
            - CREATED
            - CANCELLED
            - PENDING
            - REFUSED
            - COMPLETED
        bcTxId:
          type: string
        reason:
          type: string
        amountFiat:
          type: number
        currencyFiat:
          type: string
        sipsRef:
          type: string
        authMethod:
          type: string
        authStatus:
          type: string
    PurchaseTokenOrderDetailPage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PagePurchaseTokenOrderDetail'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseTokenOrderDetail'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    LoyaltyProgramListResponse:
      required:
        - loyaltyPrograms
      type: object
      properties:
        loyaltyPrograms:
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyProgramResponse'
    WalletByPhoneNumber:
      required:
        - address
        - phoneNumber
      type: object
      properties:
        phoneNumber:
          type: string
          description: Phone Number
        address:
          type: string
          description: wallet address associated to the phone number
      description: List of wallets address associated to a phone number
    WalletsByPhoneNumbersResponse:
      required:
        - wallets
      type: object
      properties:
        wallets:
          type: array
          description: List of wallets address associated to a phone number
          items:
            $ref: '#/components/schemas/WalletByPhoneNumber'
    WalletsByPhoneNumbersRequest:
      required:
        - phoneNumbers
      type: object
      properties:
        phoneNumbers:
          type: array
          description: List of phone numbers
          items:
            type: string
            description: List of phone numbers
    IssuerCashOutScheduleUpdateRequest:
      required:
        - assetNames
        - periodicity
      type: object
      properties:
        cashOutWallet:
          type: string
          description: Wallet address for which the cash-out process is launched
        assetNames:
          type: array
          description: Asset names for which the cash-out process is launched
          items:
            type: string
            description: Asset names for which the cash-out process is launched
        periodicity:
          type: string
          description: Scheduling period
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
        dayOfWeek:
          type: integer
          description: Cash-out schedule day of week
          format: int32
        dayOfMonth:
          type: integer
          description: Cash-out schedule day of month
          format: int32
    CancelBillRequest:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
            description: Optional metadata associated with the bill cancellation
          description: Optional metadata associated with the bill cancellation
    CashOutScheduleUpdateRequest:
      required:
        - assetName
        - periodicity
        - startDate
        - walletAddress
      type: object
      properties:
        walletAddress:
          type: string
          description: Wallet address for which the cash-out process is launched
        assetName:
          type: string
          description: Asset name for which the cash-out process is launched
        periodicity:
          type: string
          description: Scheduling period
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
        dayOfWeek:
          type: integer
          description: Cash-out schedule day of week
          format: int32
        dayOfMonth:
          type: integer
          description: Cash-out schedule day of month
          format: int32
        startDate:
          type: string
          description: Start date of the cash-out
          format: date
    PageWalletSearchResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WalletSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    WalletSearchResponse:
      required:
        - address
        - creationDate
        - owner
        - status
        - type
      type: object
      properties:
        name:
          type: string
          description: "Descriptive name of the wallet, optional"
        address:
          type: string
          description: Blockchain address of the wallet
        creationDate:
          type: string
          description: Date of creation of the wallet
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - CLOSED
        owner:
          type: string
        type:
          type: string
          enum:
            - USER
            - ORGANIZATION
    WalletSearchResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageWalletSearchResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WalletSearchResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    ScopeUpdateRequest:
      required:
        - ref
        - subScopes
      type: object
      properties:
        ref:
          type: string
          description: Scope name
        description:
          type: string
          description: Scope description
        assets:
          type: array
          description: Restriction assets
          items:
            type: string
            description: Restriction assets
        subScopes:
          type: array
          description: Refs of sub-scopes
          items:
            type: string
            description: Refs of sub-scopes
    WalletByNumberResponse:
      required:
        - wallets
      type: object
      properties:
        wallets:
          type: object
          additionalProperties:
            type: string
            description: Map associating each phone number to a wallet address
          description: Map associating each phone number to a wallet address
    WalletByNumberRequest:
      required:
        - numbers
      type: object
      properties:
        numbers:
          type: array
          description: List of phone numbers
          items:
            type: string
            description: List of phone numbers
    EmailDetail:
      required:
        - creationDate
        - email
        - status
        - type
      type: object
      properties:
        creationDate:
          type: string
          description: Email sending date and time
          format: date-time
        status:
          type: string
          description: Email sending status
          enum:
            - DELIVERED
            - OPERATOR_ERROR
            - BEING_SENT
            - CLIENT_ERROR
            - BLACKLISTED
            - UNKNOWN_CLIENT
            - NO_FINAL_STATUS_RECEIVED
            - INTEGRATION_REJECT
            - PORTABILITY_IN_PROGRESS
            - INVALID_ADDRESS
            - OTHER_ERROR
        email:
          type: string
          description: Destination address which received the Email
        type:
          type: string
          description: Email type
          enum:
            - REGISTRATION
            - PASSWORD_RESET
            - ASSET_EXPIRATION
            - CASH_IN
            - END_USER_DEACTIVATION
            - END_USER_ACTIVATION
            - END_USER_OTP_SEND
    EmailHistoryResponse:
      required:
        - emailList
      type: object
      properties:
        emailList:
          type: array
          items:
            $ref: '#/components/schemas/EmailDetail'
    IssueAssetRequest:
      required:
        - code
        - fromAddress
        - name
        - open
        - quantity
        - toAddress
        - units
      type: object
      properties:
        fromAddress:
          type: string
          description: Address used to issue the asset. It must have been granted the 'issue' permission beforehand.
        toAddress:
          type: string
          description: Address receiving the issued units of the asset. It must have been granted the 'receive' permission beforehand.
        name:
          type: string
          description: Asset name
        open:
          type: boolean
          description: "If true, more units of the same asset can be issued later. If false, the quantity of units of the asset issued during this request is final."
        quantity:
          type: number
          description: Number of units of the asset to issue
        units:
          type: number
          description: Smallest transactable unit of the asset
          example: 0.01
        fungible:
          type: boolean
          description: Flag for issuing the asset as a fungible or non fungible. default to true
        txLabel:
          type: string
          description: Optional label to associate with the issuing transaction
        code:
          type: string
          description: Asset code
        label:
          type: string
          description: Optional label
        maxAllowedBalance:
          type: number
          description: Optional max amount of assets in end-user wallets
        hasExpiration:
          type: boolean
          description: "If true, an expiration period must be entered"
        expirationPeriod:
          type: integer
          description: Optional expiration period of the asset in number of days
          format: int32
        hasTxLimit:
          type: boolean
          description: "If true, a transaction limit must be entered"
        txCount:
          type: integer
          description: Optional max transaction number for which the asset must be spent
          format: int32
        burnOnCashOut:
          type: boolean
          description: "If true, after a cash-out the tokens will be burned instead of returning into the Issuer wallet"
        autoSelectTokens:
          type: boolean
          description: "For non fungible assets, control if token selection can done automatically by the backend. defaults to true"
    AssetStatsResponse:
      required:
        - last24h
        - name
        - previous24h
        - total
      type: object
      properties:
        name:
          type: string
        total:
          $ref: '#/components/schemas/AssetStatsData'
        last24h:
          $ref: '#/components/schemas/AssetStatsData'
        previous24h:
          $ref: '#/components/schemas/AssetStatsData'
    MobileVersionRequest:
      required:
        - latestVersion
        - minimumVersion
      type: object
      properties:
        latestVersion:
          type: string
          description: Most recent version
        minimumVersion:
          type: string
          description: Minimum version required for compatibility
    DeviceDetail:
      required:
        - appVersion
        - brand
        - fingerprint
        - lastUpdate
        - manufacturer
        - os
        - osVersion
        - uid
      type: object
      properties:
        uid:
          type: string
        os:
          type: string
          enum:
            - iOS
            - Android
        osVersion:
          type: string
        appVersion:
          type: string
        buildVersion:
          type: string
        brand:
          type: string
        manufacturer:
          type: string
        model:
          type: string
        fingerprint:
          type: boolean
        data:
          type: object
          additionalProperties:
            type: object
        lastUpdate:
          type: string
          format: date-time
    DeviceListResponse:
      required:
        - devices
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceDetail'
    RateRequest:
      required:
        - currency
        - rate
      type: object
      properties:
        currency:
          type: string
          description: Currency code
        rate:
          type: number
          description: Rate * asset quantity = value in currency
    MerchantRegisterRequest:
      required:
        - email
        - firstName
        - lastName
        - organizationName
        - password
      type: object
      properties:
        firstName:
          type: string
          description: First name of the merchant user
        lastName:
          type: string
          description: Last name of the merchant user
        email:
          type: string
          description: "Email address of the merchant user, also used as user login"
        phoneNumber:
          type: string
          description: Phone number of the merchant user (optional)
        password:
          type: string
          description: Password of the merchant user
        externalRef:
          type: string
          description: "External reference of the merchant organization, optional"
        organizationName:
          type: string
          description: Name of the merchant organization
        walletName:
          type: string
          description: "Name of the organization wallet, optional"
        website:
          type: string
          description: "Website of the organization, optional"
        deviceUid:
          type: string
          description: Uid of device
        pubKey:
          type: string
          description: PubKey of device
    IntegrationDetailResponse:
      required:
        - downloadable
        - status
        - type
      type: object
      properties:
        importId:
          type: integer
          format: int64
        fileName:
          type: string
        userName:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - CREATED
            - IN_PROGRESS
            - IN_ERROR
            - EXECUTED
            - VALIDATION_DONE
            - VALIDATION_IN_PROGRESS
            - INJECTION_IN_PROGRESS
            - INJECTION_DONE
        type:
          type: string
          enum:
            - USER
            - END_USER
            - ORG
            - TRANSACTION
            - CASH_OUT
            - SCOPE
            - TOKENS
        errorLine:
          type: integer
          format: int32
        errorField:
          type: string
        errorDetail:
          type: string
        downloadable:
          type: boolean
    IntegrationDetailResponsePage:
      required:
        - content
        - first
        - last
        - number
        - numberOfElements
        - size
        - sort
        - totalElements
        - totalPages
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageIntegrationDetailResponse'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    PageIntegrationDetailResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/Pageable'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    IntegrationSearchBean:
      type: object
      properties:
        fileName:
          type: string
        userId:
          type: string
        dateFrom:
          type: string
          format: date
        dateTo:
          type: string
          format: date
        status:
          type: array
          items:
            type: string
            enum:
              - CREATED
              - IN_PROGRESS
              - IN_ERROR
              - EXECUTED
              - VALIDATION_DONE
              - VALIDATION_IN_PROGRESS
              - INJECTION_IN_PROGRESS
              - INJECTION_DONE
        types:
          type: array
          items:
            type: string
            enum:
              - USER
              - END_USER
              - ORG
              - TRANSACTION
              - CASH_OUT
              - SCOPE
              - TOKENS
    EditOrganizationRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the organization
        externalRef:
          type: string
          description: "External reference of the organization, optional"
        groups:
          type: array
          description: "Unique references of the parent organization groups, optional"
          items:
            type: string
            description: "Unique references of the parent organization groups, optional"
        website:
          type: string
          description: Organisation website
        scopes:
          type: array
          description: Organisation scope
          items:
            type: string
            description: Organisation scope
    ImportValidateSessionResponse:
      required:
        - importValidationSessionId
      type: object
      properties:
        importValidationSessionId:
          type: integer
          description: Id of the validation import session
          format: int64
    OrgScopeListResponse:
      required:
        - orgScopes
      type: object
      properties:
        orgScopes:
          type: array
          description: Organization scopes
          items:
            $ref: '#/components/schemas/OrgScopeResponse'
    OrgScopeResponse:
      required:
        - id
        - ref
      type: object
      properties:
        id:
          type: integer
          description: Id of the organization scope
          format: int64
        ref:
          type: string
          description: Organization scope reference
        organizations:
          type: array
          description: Organizations in the scope
          items:
            $ref: '#/components/schemas/OrganizationShortResponse'
      description: Organization scopes
    BurnAssetRequest:
      required:
        - fromAddress
        - quantity
      type: object
      properties:
        fromAddress:
          type: string
          description: Address holding the units of the asset to burn
        quantity:
          type: number
          description: Number of units of the asset to burn. It must have been granted the 'send' permission beforehand.
